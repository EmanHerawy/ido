{
  "address": "0x12acA48b130a466e2114ef5A6EF91f3bf3Ed89B2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startTimeSale_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintPrice_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply_",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "wallets_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newParice",
          "type": "uint256"
        }
      ],
      "name": "UpdateMintPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPrice",
          "type": "uint256"
        }
      ],
      "name": "WhiteListPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "WhiteListUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "availableTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWallets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "isWhiteListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "proofIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "name": "setMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_list",
          "type": "address[]"
        }
      ],
      "name": "setWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimeSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleWhiteListStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "updateSaleStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whilteListStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0afa6a8b30428682603c82ff8bdcbe2f5f70379608044854167431510e4bd9c3",
  "receipt": {
    "to": null,
    "from": "0xe092b1fa25DF5786D151246E492Eed3d15EA4dAA",
    "contractAddress": "0x12acA48b130a466e2114ef5A6EF91f3bf3Ed89B2",
    "transactionIndex": 10,
    "gasUsed": "1755595",
    "logsBloom": "0x
    "blockHash": "0x0fec8c9e99975fb14d0a6320790c48e5b06ffc084de0cdcef2ba5ca88b283718",
    "transactionHash": "0x0afa6a8b30428682603c82ff8bdcbe2f5f70379608044854167431510e4bd9c3",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 15968319,
        "transactionHash": "0x0afa6a8b30428682603c82ff8bdcbe2f5f70379608044854167431510e4bd9c3",
        "address": "0x12acA48b130a466e2114ef5A6EF91f3bf3Ed89B2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e092b1fa25df5786d151246e492eed3d15ea4daa"
        ],
        "data": "0x",
        "logIndex": 55,
        "blockHash": "0x0fec8c9e99975fb14d0a6320790c48e5b06ffc084de0cdcef2ba5ca88b283718"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 15968319,
        "transactionHash": "0x0afa6a8b30428682603c82ff8bdcbe2f5f70379608044854167431510e4bd9c3",
        "address": "0x12acA48b130a466e2114ef5A6EF91f3bf3Ed89B2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000e092b1fa25df5786d151246e492eed3d15ea4daa",
          "0x000000000000000000000000e092b1fa25df5786d151246e492eed3d15ea4daa"
        ],
        "data": "0x",
        "logIndex": 56,
        "blockHash": "0x0fec8c9e99975fb14d0a6320790c48e5b06ffc084de0cdcef2ba5ca88b283718"
      }
    ],
    "blockNumber": 15968319,
    "cumulativeGasUsed": "5352512",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1640704213,
    "100000000000000",
    "8888000000000000000000",
    [
      "0x2819C6d61e4c83bc53dD17D4aa00deDBe35894AA"
    ],
    "0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee",
    "0xbf0ffba74bbfe340788a9d951d7b3a1a261e5eb2",
    "0x2711824D10c7935D247fe1189B336d4c7e6Ed918",
    "0xe092b1fa25DF5786D151246E492Eed3d15EA4dAA"
  ],
  "solcInputHash": "d5a6033f09bf188c6ba3b999fe4833fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimeSale_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"wallets_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newParice\",\"type\":\"uint256\"}],\"name\":\"UpdateMintPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"}],\"name\":\"WhiteListPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"WhiteListUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWallets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"proofIndexes\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimeSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleWhiteListStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"updateSaleStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whilteListStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"availableTokenCount()\":{\"details\":\"Check whether tokens are still available\",\"returns\":{\"_0\":\"the available token count\"}},\"maxSupply()\":{\"details\":\"Get the max Supply\",\"returns\":{\"_0\":\"the maximum token count\"}},\"mint(uint256,uint256[])\":{\"details\":\"called only when sale is startedcalled only when not paused`_amount` can't zeromust not xceed the cap\",\"params\":{\"_amount\":\"number of token to be minted\",\"proofIndexes\":\"user pools index to be used, index should only be used once emit Transfer\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses all token transfers. See {ERC721Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"tokenCount()\":{\"details\":\"Get the current token count\",\"returns\":{\"_0\":\"the created token count\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses all token transfers. See {ERC721Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"updateSaleStartTime(uint256)\":{\"details\":\"`__startTimeURI` must be more than the current time\",\"params\":{\"_startTime\":\"new _startTime\"}},\"withdraw()\":{\"details\":\"Withdraw accumulated balance for `wallets`\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mint(uint256,uint256[])\":{\"notice\":\"caller should pay the required price\"},\"updateSaleStartTime(uint256)\":{\"notice\":\"Only owner can call it\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StartfiIDO.sol\":\"StartfiIDO\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xa681e276ffa5896274bd7fbb01a1258190d7b72215208606db00d44aa4890811\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0xc1b966eb28b972bae1d366d8ef0b3133eea869cfc65b8b4c90c389fcd67a8085\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/StartfiIDO.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\n//SPDX-License-Identifier: AGPL-3.0-only\\n/*\\n        ,                                                                       \\n  %%%%%%%%%%%%%%                                                      %%%%%%%   \\n %%%           ./    %%                                %%%          %%%       %%\\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \\n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\\n  ,,,,,,,,,,,,,,                                                                */\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport './extensions/WithLimitedSupply.sol';\\nimport './extensions/WithTokenPayment.sol';\\nimport './extensions/WithStartTime.sol';\\nimport './extensions/PausableERC20.sol';\\nimport './extensions/WithMintedERC20.sol';\\nimport './extensions/WithWhiteListSupport.sol';\\nimport './interface/IStartFiStakes.sol';\\n\\ncontract StartfiIDO is\\n    WithMintedERC20,\\n    WithWhiteListSupport,\\n    WithLimitedSupply,\\n    WithStartTime,\\n    PausableERC20,\\n    WithTokenPayment\\n{\\n    /**************************libraries ********** */\\n    using Strings for uint256;\\n    /***************************Declarations go here ********** */\\n    IStartFiStakes stakes;\\n    uint256 level1 = 2700 * 1 ether;\\n    uint256 level2 = 7000 * 1 ether;\\n    uint256 level3 = 14000 * 1 ether;\\n    uint256 level1Max = 500000 * 1 ether;\\n    uint256 level2Max = level1Max * 3;\\n    uint256 level3Max = level1Max * 6;\\n\\n    // modifier\\n    /******************************************* constructor goes here ********************************************************* */\\n    constructor(\\n        uint256 startTimeSale_,\\n        uint256 mintPrice_,\\n        uint256 maxSupply_,\\n        address[] memory wallets_,\\n        address _paymentToken,\\n        address _token,\\n        address staking,\\n        address owner_\\n    )\\n        WithLimitedSupply(maxSupply_)\\n        WithTokenPayment(wallets_, _paymentToken, mintPrice_)\\n        PausableERC20(owner_)\\n        WithStartTime(startTimeSale_)\\n        WithMintedERC20(_token)\\n    {\\n        stakes = IStartFiStakes(staking);\\n    }\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n\\n    /// @notice caller should pay the required price\\n    /// @dev  called only when sale is started\\n    /// @dev  called only when not paused\\n    /// @dev  `_amount` can't zero\\n    /// @dev must not xceed the cap\\n    /// @param _amount number of token to be minted\\n    /// @param proofIndexes user pools index to be used, index should only be used once\\n    /// emit Transfer\\n    function mint(uint256 _amount, uint256[] calldata proofIndexes)\\n        external\\n        whenNotPaused\\n        isSaleStarted\\n        isWithinCapLimit(_amount)\\n    {\\n        if (whilteListStatus()) {\\n            require(isWhiteListed(_msgSender()), 'Must be white listed');\\n        }\\n        // get max amount user can buy\\n        require(_amount > 0, 'invalid_amount');\\n        uint256 tokenAmount;\\n        uint256 totalStakesForGivenIndexes = stakes.ValidateStakes(_msgSender(), proofIndexes);\\n        require(totalStakesForGivenIndexes > 0, 'No Participation with zero stakes');\\n        if (totalStakesForGivenIndexes <= level1) {\\n            tokenAmount = _amount > level1Max ? level1Max : _amount;\\n        } else if (totalStakesForGivenIndexes <= level2) {\\n            tokenAmount = _amount > level2Max ? level2Max : _amount;\\n        } else {\\n            tokenAmount = _amount > level3Max ? level3Max : _amount;\\n        }\\n        uint256 _price = mintPrice() * tokenAmount;\\n        require(tokenAmount <= _balance(), 'Insufficient contract balance');\\n        require(_price <= _getAllowance(_msgSender()), 'Insufficient price value');\\n        require(_transferPayment(_msgSender(), _price), 'Payment failed');\\n        require(_transferToken(_msgSender(), tokenAmount), 'transfer token failed');\\n    }\\n\\n    /// @notice Only owner can call it\\n    /// @dev  `__startTimeURI` must be more than the current time\\n    /// @param _startTime new _startTime\\n    function updateSaleStartTime(uint256 _startTime) external onlyOwner isSaleNotStarted {\\n        _setSaleStartTime(_startTime);\\n    }\\n\\n    function setMintPrice(uint256 price_) external onlyOwner whenPaused {\\n        _setMintPrice(price_);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for `wallets`\\n     *\\n     */\\n    function withdraw() external onlyOwner {\\n        _withdraw();\\n    }\\n\\n    function toggleWhiteListStatus() external onlyOwner {\\n        _toggleWhiteListStatus();\\n    }\\n\\n    function setWhiteList(address[] memory _list) external onlyOwner {\\n        _setWhiteList(_list);\\n    }\\n}\\n\",\"keccak256\":\"0x7b41e0bb654890ac7ba2e02093aa08b212788a96b5a31fbe89eaed68d4a367b5\",\"license\":\"AGPL-3.0-only\"},\"contracts/extensions/PausableERC20.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\n//SPDX-License-Identifier: AGPL-3.0-only\\n/*\\n        ,                                                                       \\n  %%%%%%%%%%%%%%                                                      %%%%%%%   \\n %%%           ./    %%                                %%%          %%%       %%\\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \\n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\\n  ,,,,,,,,,,,,,,                                                                */\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\n\\n/// @title  AnyERC20 With Eth contract\\n//\\n/// @author startfi team\\nabstract contract PausableERC20 is Pausable, Ownable {\\n    /**************************libraries ********** */\\n\\n    /***************************Declarations go here ********** */\\n    // stat var\\n\\n    // tokenID => timestamp\\n\\n    // event\\n\\n    // modifier\\n    /******************************************* constructor goes here ********************************************************* */\\n    constructor(address owner_) {\\n        transferOwnership(owner_);\\n    }\\n\\n    /******************************************* modify state functions go here ********************************************************* */\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() external virtual onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() external virtual onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x23bcaee42569f42d14bedeac134e26902eaf732d353caca50222b6af0cdd70cc\",\"license\":\"AGPL-3.0-only\"},\"contracts/extensions/WithLimitedSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\n\\n/// @author 1001.digital - edit mhjey - edit\\n/// @title A token tracker that limits the token supply and increments token IDs on each new mint.\\nabstract contract WithLimitedSupply {\\n    using Counters for Counters.Counter;\\n\\n    // Keeps track of how many we have minted\\n    Counters.Counter private _tokenCount;\\n\\n    /// @dev The maximum count of tokens this token tracker will hold.\\n    uint256 private immutable _maxSupply;\\n\\n    modifier isWithinCapLimit(uint256 tokenAmount) virtual {\\n        require((tokenCount() + tokenAmount) <= _maxSupply, 'Purchase exceeds max supply');\\n        _;\\n    }\\n    /// @dev Check whether another token is still available\\n    modifier ensureAvailability() {\\n        require(availableTokenCount() > 0, 'No more tokens available');\\n        _;\\n    }\\n\\n    /// @param amount Check whether number of tokens are still available\\n    /// @dev Check whether tokens are still available\\n    modifier ensureAvailabilityFor(uint256 amount) {\\n        require(availableTokenCount() >= amount, 'Requested number of tokens not available');\\n        _;\\n    }\\n\\n    /// Instanciate the contract\\n    /// @param totalSupply_ how many tokens this collection should hold\\n    constructor(uint256 totalSupply_) {\\n        _maxSupply = totalSupply_;\\n    }\\n\\n    /// @dev Get the max Supply\\n    /// @return the maximum token count\\n    function maxSupply() public view returns (uint256) {\\n        return _maxSupply;\\n    }\\n\\n    /// @dev Get the current token count\\n    /// @return the created token count\\n    function tokenCount() public view returns (uint256) {\\n        return _tokenCount.current();\\n    }\\n\\n    /// @dev Check whether tokens are still available\\n    /// @return the available token count\\n    function availableTokenCount() public view returns (uint256) {\\n        return maxSupply() - tokenCount();\\n    }\\n\\n    /// @dev Increment the token count and fetch the latest count\\n    /// @return the next token id\\n    function nextToken() internal virtual ensureAvailability returns (uint256) {\\n        uint256 token = _tokenCount.current();\\n\\n        _tokenCount.increment();\\n\\n        return token;\\n    }\\n}\\n\",\"keccak256\":\"0x582629b6076ef6c2591b9fda59e6ea6da55c8316359cfe25798abb02fcdad662\",\"license\":\"MIT\"},\"contracts/extensions/WithMintedERC20.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\n//SPDX-License-Identifier: AGPL-3.0-only\\n/*\\n        ,                                                                       \\n  %%%%%%%%%%%%%%                                                      %%%%%%%   \\n %%%           ./    %%                                %%%          %%%       %%\\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \\n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\\n  ,,,,,,,,,,,,,,                                                                */\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\n\\n/// @title  WithTokenPayment contract\\n//\\ncontract WithMintedERC20 is ReentrancyGuard {\\n    /**************************libraries ********** */\\n\\n    /***************************Declarations go here ********** */\\n    // stat var\\n\\n    IERC20 private immutable _erc20Token;\\n\\n    // modifier\\n\\n    /******************************************* constructor goes here ********************************************************* */\\n    constructor(address token_) {\\n        _erc20Token = IERC20(token_);\\n    }\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n\\n    /******************************************* modify state functions go here ********************************************************* */\\n\\n    function _transferToken(address sender, uint256 amount) internal nonReentrant returns (bool) {\\n        return _erc20Token.transfer(sender, amount);\\n    }\\n\\n    function _balance() internal nonReentrant returns (uint256) {\\n        return _erc20Token.balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd6db2f0e5adb91b75ab6a80ef6baf7411104d210284b1b744d5cf09ef4416f01\",\"license\":\"AGPL-3.0-only\"},\"contracts/extensions/WithStartTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title mange start time for sale\\nabstract contract WithStartTime {\\n    uint256 private _startTimeSale;\\n\\n    constructor(uint256 startTime_) {\\n        _startTimeSale = startTime_;\\n    }\\n\\n    modifier isSaleStarted() {\\n        require(_startTimeSale <= block.timestamp && _startTimeSale != 0, 'Sale did not start yet');\\n\\n        _;\\n    }\\n    modifier isSaleNotStarted() {\\n        require(_startTimeSale > block.timestamp || _startTimeSale == 0, 'Sale has started');\\n\\n        _;\\n    }\\n\\n    /// @notice Only woner can call it\\n    /// @dev  `__startTimeURI` must be more than the current time\\n    /// @param _startTime new _startTime\\n    function _setSaleStartTime(uint256 _startTime) internal {\\n        require(_startTime > block.timestamp, 'Can not set time back');\\n        _startTimeSale = _startTime;\\n    }\\n\\n    function startTimeSale() external view returns (uint256) {\\n        return _startTimeSale;\\n    }\\n}\\n\",\"keccak256\":\"0xdd4a1e86db4e5b3fb7def67c38c29f97dd794fb83272b2cade5e6916742ae8fa\",\"license\":\"MIT\"},\"contracts/extensions/WithTokenPayment.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\n//SPDX-License-Identifier: AGPL-3.0-only\\n/*\\n        ,                                                                       \\n  %%%%%%%%%%%%%%                                                      %%%%%%%   \\n %%%           ./    %%                                %%%          %%%       %%\\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \\n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\\n  ,,,,,,,,,,,,,,                                                                */\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\n\\n/// @title  WithTokenPayment contract\\n//\\ncontract WithTokenPayment is ReentrancyGuard {\\n    /**************************libraries ********** */\\n\\n    /***************************Declarations go here ********** */\\n    // stat var\\n    uint256 private _mintPrice;\\n\\n    IERC20 private immutable _erc20Token;\\n    address[] private _wallets;\\n\\n    // event\\n    event UpdateMintPrice(uint256 newParice);\\n    event Withdrawn(address payee, uint256 amount);\\n\\n    // modifier\\n\\n    /******************************************* constructor goes here ********************************************************* */\\n    constructor(\\n        address[] memory wallets_,\\n        address token_,\\n        uint256 mintPrice_\\n    ) {\\n        _wallets = wallets_;\\n        _mintPrice = mintPrice_;\\n\\n        _erc20Token = IERC20(token_);\\n    }\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n\\n    /******************************************* modify state functions go here ********************************************************* */\\n    function _getAllowance(address owner) internal view returns (uint256) {\\n        return _erc20Token.allowance(owner, address(this));\\n    }\\n\\n    function mintPrice() public view returns (uint256) {\\n        return _mintPrice;\\n    }\\n\\n    function _transferPayment(address sender, uint256 amount) internal nonReentrant returns (bool) {\\n        return _erc20Token.transferFrom(sender, address(this), amount);\\n    }\\n\\n    function getWallets() external view returns (address[] memory) {\\n        return _wallets;\\n    }\\n\\n    function getBalanceOf(address user) internal view returns (uint256) {\\n        return _erc20Token.balanceOf(user);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a wallet 1 and wallet 2, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     */\\n    function _withdraw() internal virtual nonReentrant {\\n        uint256 share = _erc20Token.balanceOf(address(this)) / _wallets.length;\\n        require(share > 0, \\\"Can't split zero shares\\\");\\n        for (uint256 index = 0; index < _wallets.length; index++) {\\n            emit Withdrawn(_wallets[index], share);\\n\\n            require(_erc20Token.transfer(_wallets[index], share), \\\"Couldn't transfer token\\\");\\n        }\\n    }\\n\\n    function _setMintPrice(uint256 mintPrice_) internal {\\n        require(mintPrice_ > 0, 'Zero value is not allowed');\\n        _mintPrice = mintPrice_;\\n        emit UpdateMintPrice(mintPrice_);\\n    }\\n}\\n\",\"keccak256\":\"0x164c832a5e78f7a44d293e81190227bd3a6079aa49b7ce6d58bd3aab9205934a\",\"license\":\"AGPL-3.0-only\"},\"contracts/extensions/WithWhiteListSupport.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\nimport '@openzeppelin/contracts/utils/structs/EnumerableMap.sol';\\n\\nabstract contract WithWhiteListSupport {\\n    // Add the library methods\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    bool private _whiteListEnabled;\\n    // Declare a set state variable\\n    EnumerableSet.AddressSet private _whiteList;\\n    event WhiteListPriceUpdated(uint256 newPrice, uint256 oldPrice);\\n    event WhiteListUpdated(address beneficiary);\\n\\n    /// @dev to be override by the child contract to add access control modifier\\n    function _toggleWhiteListStatus() internal virtual {\\n        _whiteListEnabled = !_whiteListEnabled;\\n    }\\n\\n    /// @dev to be override by the child contract to add access control modifier\\n    function _setWhiteList(address[] memory _list) internal virtual {\\n        // require(whiteList.length()==0,\\\"Already initialzed\\\");\\n        // require(_list.length > 0, 'Empty list is not allowed');\\n        for (uint256 index = 0; index < _list.length; index++) {\\n            require(_list[index] != address(0), 'empty address is not allowed');\\n            require(!_whiteList.contains(_list[index]), 'duplicated address is not allowed');\\n            require(_whiteList.add(_list[index]));\\n            emit WhiteListUpdated(_list[index]);\\n        }\\n    }\\n\\n    function isWhiteListed(address _beneficiary) public view returns (bool) {\\n        return _whiteList.contains(_beneficiary);\\n    }\\n\\n    function whilteListStatus() public view returns (bool) {\\n        return _whiteListEnabled;\\n    }\\n}\\n\",\"keccak256\":\"0x39e9cacc6c9d9fd711e5b501b1859288b75f53ab4c8c8deb55903d68e1fa6325\",\"license\":\"MIT\"},\"contracts/interface/IStartFiStakes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.4;\\n\\n/**\\n \\n *@title  IStartFi Stakes\\n * [ desc ] : contract to hold users stakes\\n *@notice : the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle\\n */\\n\\ninterface IStartFiStakes {\\n    /******************************************* decalrations go here ********************************************************* */\\n\\n    event DepositFunds(address indexed diposter, uint256 amount);\\n    event WithdrawFunds(address indexed diposter, uint256 amount);\\n    event ChangeLockDuration(uint256 duration);\\n\\n    /******************************************* constructor goes here ********************************************************* */\\n\\n    // deposit\\n    function deposit(address user, uint256 amount) external;\\n\\n    function ValidateStakes(address user, uint256[] calldata proofIndexes) external returns (uint256 reservAmount);\\n\\n    // withdraw\\n    function withdraw(uint256 amount, uint256[] calldata proofIndexes) external;\\n\\n    function emergencyWithdraw(uint256[] calldata proofIndexes) external;\\n}\\n\",\"keccak256\":\"0x491db7377ba8eae9eafdc2fe45eda5e76f3626f63ba9c4c0f0f456da3a337477\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e060405268925e06eec972b00000600a5569017b7883c06916600000600b556902f6f10780d22cc00000600c556969e10de76676d0800000600d8190556200004a90600362000448565b600e55600d546200005d90600662000448565b600f553480156200006d57600080fd5b5060405162001e7338038062001e73833981016040819052620000909162000301565b6001600055606083901b6001600160601b03191660805260a086905260058890556006805460ff1916905584848883620000ca336200012e565b620000d58162000188565b508251620000eb90600890602086019062000263565b5060075560601b6001600160601b03191660c0525050600980546001600160a01b0319166001600160a01b0392909216919091179055506200048a945050505050565b600680546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6006546001600160a01b03610100909104163314620001ee5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620002555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001e5565b62000260816200012e565b50565b828054828255906000526020600020908101928215620002bb579160200282015b82811115620002bb57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000284565b50620002c9929150620002cd565b5090565b5b80821115620002c95760008155600101620002ce565b80516001600160a01b0381168114620002fc57600080fd5b919050565b600080600080600080600080610100898b0312156200031e578384fd5b885160208a015160408b015160608c0151929a5090985096506001600160401b03808211156200034c578586fd5b818b0191508b601f83011262000360578586fd5b81518181111562000375576200037562000474565b8060051b604051601f19603f830116810181811085821117156200039d576200039d62000474565b8060405250809350828152602081019350602085018f6020848801011115620003c457898afd5b8995505b83861015620003f257620003dc81620002e4565b85526001959095019460209485019401620003c8565b5080995050505050506200040960808a01620002e4565b93506200041960a08a01620002e4565b92506200042960c08a01620002e4565b91506200043960e08a01620002e4565b90509295985092959890939650565b60008160001904831182151516156200046f57634e487b7160e01b81526011600452602481fd5b500290565b634e487b7160e01b600052604160045260246000fd5b60805160601c60a05160c05160601c611989620004ea60003960008181610c4001528181610d4201528181610eec0152611048015260008181610210015281816103be0152610985015260008181610b8c0152610e4b01526119896000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80638456cb59116100ad578063db7a460511610071578063db7a460514610234578063e14ca35314610249578063f2fde38b14610251578063f4a0a52814610264578063fa4d2c671461027757600080fd5b80638456cb59146101cd5780638da5cb5b146101d55780638da7878c146101fe5780639f181b5e14610206578063d5abeb011461020e57600080fd5b806364954df8116100f457806364954df8146101855780636817c76c1461018d5780636f9170f61461019f578063715018a6146101b2578063775b9c13146101ba57600080fd5b8063295e4edf146101315780632d69044f146101465780633ccfd60b146101595780633f4ba83a146101615780635c975abb14610169575b600080fd5b61014461013f366004611727565b610282565b005b610144610154366004611757565b610316565b61014461078c565b6101446107c6565b60065460ff165b60405190151581526020015b60405180910390f35b6101446107fe565b6007545b60405190815260200161017c565b6101706101ad366004611626565b610845565b610144610858565b6101446101c8366004611640565b610892565b6101446108cb565b60065461010090046001600160a01b03166040516001600160a01b03909116815260200161017c565b600554610191565b610191610903565b7f0000000000000000000000000000000000000000000000000000000000000000610191565b61023c610913565b60405161017c919061181c565b610191610975565b61014461025f366004611626565b6109a9565b610144610272366004611727565b610a47565b60015460ff16610170565b6006546001600160a01b036101009091041633146102bb5760405162461bcd60e51b81526004016102b290611869565b60405180910390fd5b4260055411806102cb5750600554155b61030a5760405162461bcd60e51b815260206004820152601060248201526f14d85b19481a185cc81cdd185c9d195960821b60448201526064016102b2565b61031381610ac9565b50565b60065460ff161561035c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102b2565b426005541115801561036f575060055415155b6103bb5760405162461bcd60e51b815260206004820152601660248201527f53616c6520646964206e6f74207374617274207965740000000000000000000060448201526064016102b2565b827f0000000000000000000000000000000000000000000000000000000000000000816103e6610903565b6103f0919061189e565b111561043e5760405162461bcd60e51b815260206004820152601b60248201527f50757263686173652065786365656473206d617820737570706c79000000000060448201526064016102b2565b60015460ff161561049e5761045233610845565b61049e5760405162461bcd60e51b815260206004820152601460248201527f4d757374206265207768697465206c697374656400000000000000000000000060448201526064016102b2565b600084116104df5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5917d85b5bdd5b9d60921b60448201526064016102b2565b60095460009081906001600160a01b031663e1f85e1f3387876040518463ffffffff1660e01b8152600401610516939291906117d1565b602060405180830381600087803b15801561053057600080fd5b505af1158015610544573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610568919061173f565b9050600081116105c45760405162461bcd60e51b815260206004820152602160248201527f4e6f2050617274696369706174696f6e2077697468207a65726f207374616b656044820152607360f81b60648201526084016102b2565b600a5481116105e757600d5486116105dc57856105e0565b600d545b915061061f565b600b54811161060957600e5486116105ff57856105e0565b600e54915061061f565b600f548611610618578561061c565b600f545b91505b60008261062b60075490565b61063591906118d6565b905061063f610b1d565b83111561068e5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e636500000060448201526064016102b2565b61069733610c18565b8111156106e65760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e742070726963652076616c7565000000000000000060448201526064016102b2565b6106f03382610cbc565b61072d5760405162461bcd60e51b815260206004820152600e60248201526d14185e5b595b9d0819985a5b195960921b60448201526064016102b2565b6107373384610dcb565b6107835760405162461bcd60e51b815260206004820152601560248201527f7472616e7366657220746f6b656e206661696c6564000000000000000000000060448201526064016102b2565b50505050505050565b6006546001600160a01b036101009091041633146107bc5760405162461bcd60e51b81526004016102b290611869565b6107c4610e7a565b565b6006546001600160a01b036101009091041633146107f65760405162461bcd60e51b81526004016102b290611869565b6107c4611189565b6006546001600160a01b0361010090910416331461082e5760405162461bcd60e51b81526004016102b290611869565b6107c46001805460ff19811660ff90911615179055565b600061085260028361121c565b92915050565b6006546001600160a01b036101009091041633146108885760405162461bcd60e51b81526004016102b290611869565b6107c46000611241565b6006546001600160a01b036101009091041633146108c25760405162461bcd60e51b81526004016102b290611869565b610313816112a8565b6006546001600160a01b036101009091041633146108fb5760405162461bcd60e51b81526004016102b290611869565b6107c4611497565b600061090e60045490565b905090565b6060600880548060200260200160405190810160405280929190818152602001828054801561096b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161094d575b5050505050905090565b600061097f610903565b61090e907f00000000000000000000000000000000000000000000000000000000000000006118f5565b6006546001600160a01b036101009091041633146109d95760405162461bcd60e51b81526004016102b290611869565b6001600160a01b038116610a3e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102b2565b61031381611241565b6006546001600160a01b03610100909104163314610a775760405162461bcd60e51b81526004016102b290611869565b60065460ff16610ac05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102b2565b61031381611512565b428111610b185760405162461bcd60e51b815260206004820152601560248201527f43616e206e6f74207365742074696d65206261636b000000000000000000000060448201526064016102b2565b600555565b600060026000541415610b725760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102b2565b60026000556040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610bd657600080fd5b505afa158015610bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0e919061173f565b9050600160005590565b604051636eb1769f60e11b81526001600160a01b0382811660048301523060248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063dd62ed3e9060440160206040518083038186803b158015610c8457600080fd5b505afa158015610c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610852919061173f565b600060026000541415610d115760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102b2565b60026000556040516323b872dd60e01b81526001600160a01b038481166004830152306024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064015b602060405180830381600087803b158015610d8757600080fd5b505af1158015610d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbf9190611707565b60016000559392505050565b600060026000541415610e205760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102b2565b600260005560405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401610d6d565b60026000541415610ecd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102b2565b600260009081556008546040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610f3657600080fd5b505afa158015610f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6e919061173f565b610f7891906118b6565b905060008111610fca5760405162461bcd60e51b815260206004820152601760248201527f43616e27742073706c6974207a65726f2073686172657300000000000000000060448201526064016102b2565b60005b600854811015611180577f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d56008828154811061101957634e487b7160e01b600052603260045260246000fd5b60009182526020918290200154604080516001600160a01b0390921682529181018590520160405180910390a17f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6008838154811061109657634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260248101859052604401602060405180830381600087803b1580156110ea57600080fd5b505af11580156110fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111229190611707565b61116e5760405162461bcd60e51b815260206004820152601760248201527f436f756c646e2774207472616e7366657220746f6b656e00000000000000000060448201526064016102b2565b806111788161190c565b915050610fcd565b50506001600055565b60065460ff166111d25760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102b2565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b600680546001600160a01b0383811661010081810274ffffffffffffffffffffffffffffffffffffffff001985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005b81518110156114935760006001600160a01b03168282815181106112df57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316141561133e5760405162461bcd60e51b815260206004820152601c60248201527f656d7074792061646472657373206973206e6f7420616c6c6f7765640000000060448201526064016102b2565b61137982828151811061136157634e487b7160e01b600052603260045260246000fd5b6020026020010151600261121c90919063ffffffff16565b156113d05760405162461bcd60e51b815260206004820152602160248201527f6475706c6963617465642061646472657373206973206e6f7420616c6c6f77656044820152601960fa1b60648201526084016102b2565b61140b8282815181106113f357634e487b7160e01b600052603260045260246000fd5b6020026020010151600261159d90919063ffffffff16565b61141457600080fd5b7f37bdaf50464e57bc2ca69f36ace378196f59c54486a220a7051208cb4e249da082828151811061145557634e487b7160e01b600052603260045260246000fd5b602002602001015160405161147991906001600160a01b0391909116815260200190565b60405180910390a18061148b8161190c565b9150506112ab565b5050565b60065460ff16156114dd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102b2565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586111ff3390565b600081116115625760405162461bcd60e51b815260206004820152601960248201527f5a65726f2076616c7565206973206e6f7420616c6c6f7765640000000000000060448201526064016102b2565b60078190556040518181527f0f6e30cbea7cb67e47bd9d9c28efec570b560826aef4cf586a3b52a2e45396d19060200160405180910390a150565b600061123a836001600160a01b03841660006115cc838360009081526001919091016020526040902054151590565b61160257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610852565b506000610852565b80356001600160a01b038116811461162157600080fd5b919050565b600060208284031215611637578081fd5b61123a8261160a565b60006020808385031215611652578182fd5b823567ffffffffffffffff80821115611669578384fd5b818501915085601f83011261167c578384fd5b81358181111561168e5761168e61193d565b8060051b604051601f19603f830116810181811085821117156116b3576116b361193d565b604052828152858101935084860182860187018a10156116d1578788fd5b8795505b838610156116fa576116e68161160a565b8552600195909501949386019386016116d5565b5098975050505050505050565b600060208284031215611718578081fd5b8151801515811461123a578182fd5b600060208284031215611738578081fd5b5035919050565b600060208284031215611750578081fd5b5051919050565b60008060006040848603121561176b578182fd5b83359250602084013567ffffffffffffffff80821115611789578384fd5b818601915086601f83011261179c578384fd5b8135818111156117aa578485fd5b8760208260051b85010111156117be578485fd5b6020830194508093505050509250925092565b6001600160a01b0384168152604060208201819052810182905260006001600160fb1b03831115611800578081fd5b8260051b80856060850137919091016060019081529392505050565b6020808252825182820181905260009190848201906040850190845b8181101561185d5783516001600160a01b031683529284019291840191600101611838565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156118b1576118b1611927565b500190565b6000826118d157634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156118f0576118f0611927565b500290565b60008282101561190757611907611927565b500390565b600060001982141561192057611920611927565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220ca492dff4ca8d489d41a62c70a8a26621b2d4f60064a1dece2f08f16b7f09bac64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80638456cb59116100ad578063db7a460511610071578063db7a460514610234578063e14ca35314610249578063f2fde38b14610251578063f4a0a52814610264578063fa4d2c671461027757600080fd5b80638456cb59146101cd5780638da5cb5b146101d55780638da7878c146101fe5780639f181b5e14610206578063d5abeb011461020e57600080fd5b806364954df8116100f457806364954df8146101855780636817c76c1461018d5780636f9170f61461019f578063715018a6146101b2578063775b9c13146101ba57600080fd5b8063295e4edf146101315780632d69044f146101465780633ccfd60b146101595780633f4ba83a146101615780635c975abb14610169575b600080fd5b61014461013f366004611727565b610282565b005b610144610154366004611757565b610316565b61014461078c565b6101446107c6565b60065460ff165b60405190151581526020015b60405180910390f35b6101446107fe565b6007545b60405190815260200161017c565b6101706101ad366004611626565b610845565b610144610858565b6101446101c8366004611640565b610892565b6101446108cb565b60065461010090046001600160a01b03166040516001600160a01b03909116815260200161017c565b600554610191565b610191610903565b7f0000000000000000000000000000000000000000000000000000000000000000610191565b61023c610913565b60405161017c919061181c565b610191610975565b61014461025f366004611626565b6109a9565b610144610272366004611727565b610a47565b60015460ff16610170565b6006546001600160a01b036101009091041633146102bb5760405162461bcd60e51b81526004016102b290611869565b60405180910390fd5b4260055411806102cb5750600554155b61030a5760405162461bcd60e51b815260206004820152601060248201526f14d85b19481a185cc81cdd185c9d195960821b60448201526064016102b2565b61031381610ac9565b50565b60065460ff161561035c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102b2565b426005541115801561036f575060055415155b6103bb5760405162461bcd60e51b815260206004820152601660248201527f53616c6520646964206e6f74207374617274207965740000000000000000000060448201526064016102b2565b827f0000000000000000000000000000000000000000000000000000000000000000816103e6610903565b6103f0919061189e565b111561043e5760405162461bcd60e51b815260206004820152601b60248201527f50757263686173652065786365656473206d617820737570706c79000000000060448201526064016102b2565b60015460ff161561049e5761045233610845565b61049e5760405162461bcd60e51b815260206004820152601460248201527f4d757374206265207768697465206c697374656400000000000000000000000060448201526064016102b2565b600084116104df5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5917d85b5bdd5b9d60921b60448201526064016102b2565b60095460009081906001600160a01b031663e1f85e1f3387876040518463ffffffff1660e01b8152600401610516939291906117d1565b602060405180830381600087803b15801561053057600080fd5b505af1158015610544573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610568919061173f565b9050600081116105c45760405162461bcd60e51b815260206004820152602160248201527f4e6f2050617274696369706174696f6e2077697468207a65726f207374616b656044820152607360f81b60648201526084016102b2565b600a5481116105e757600d5486116105dc57856105e0565b600d545b915061061f565b600b54811161060957600e5486116105ff57856105e0565b600e54915061061f565b600f548611610618578561061c565b600f545b91505b60008261062b60075490565b61063591906118d6565b905061063f610b1d565b83111561068e5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e636500000060448201526064016102b2565b61069733610c18565b8111156106e65760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e742070726963652076616c7565000000000000000060448201526064016102b2565b6106f03382610cbc565b61072d5760405162461bcd60e51b815260206004820152600e60248201526d14185e5b595b9d0819985a5b195960921b60448201526064016102b2565b6107373384610dcb565b6107835760405162461bcd60e51b815260206004820152601560248201527f7472616e7366657220746f6b656e206661696c6564000000000000000000000060448201526064016102b2565b50505050505050565b6006546001600160a01b036101009091041633146107bc5760405162461bcd60e51b81526004016102b290611869565b6107c4610e7a565b565b6006546001600160a01b036101009091041633146107f65760405162461bcd60e51b81526004016102b290611869565b6107c4611189565b6006546001600160a01b0361010090910416331461082e5760405162461bcd60e51b81526004016102b290611869565b6107c46001805460ff19811660ff90911615179055565b600061085260028361121c565b92915050565b6006546001600160a01b036101009091041633146108885760405162461bcd60e51b81526004016102b290611869565b6107c46000611241565b6006546001600160a01b036101009091041633146108c25760405162461bcd60e51b81526004016102b290611869565b610313816112a8565b6006546001600160a01b036101009091041633146108fb5760405162461bcd60e51b81526004016102b290611869565b6107c4611497565b600061090e60045490565b905090565b6060600880548060200260200160405190810160405280929190818152602001828054801561096b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161094d575b5050505050905090565b600061097f610903565b61090e907f00000000000000000000000000000000000000000000000000000000000000006118f5565b6006546001600160a01b036101009091041633146109d95760405162461bcd60e51b81526004016102b290611869565b6001600160a01b038116610a3e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102b2565b61031381611241565b6006546001600160a01b03610100909104163314610a775760405162461bcd60e51b81526004016102b290611869565b60065460ff16610ac05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102b2565b61031381611512565b428111610b185760405162461bcd60e51b815260206004820152601560248201527f43616e206e6f74207365742074696d65206261636b000000000000000000000060448201526064016102b2565b600555565b600060026000541415610b725760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102b2565b60026000556040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610bd657600080fd5b505afa158015610bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0e919061173f565b9050600160005590565b604051636eb1769f60e11b81526001600160a01b0382811660048301523060248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063dd62ed3e9060440160206040518083038186803b158015610c8457600080fd5b505afa158015610c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610852919061173f565b600060026000541415610d115760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102b2565b60026000556040516323b872dd60e01b81526001600160a01b038481166004830152306024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064015b602060405180830381600087803b158015610d8757600080fd5b505af1158015610d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbf9190611707565b60016000559392505050565b600060026000541415610e205760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102b2565b600260005560405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401610d6d565b60026000541415610ecd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102b2565b600260009081556008546040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610f3657600080fd5b505afa158015610f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6e919061173f565b610f7891906118b6565b905060008111610fca5760405162461bcd60e51b815260206004820152601760248201527f43616e27742073706c6974207a65726f2073686172657300000000000000000060448201526064016102b2565b60005b600854811015611180577f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d56008828154811061101957634e487b7160e01b600052603260045260246000fd5b60009182526020918290200154604080516001600160a01b0390921682529181018590520160405180910390a17f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6008838154811061109657634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260248101859052604401602060405180830381600087803b1580156110ea57600080fd5b505af11580156110fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111229190611707565b61116e5760405162461bcd60e51b815260206004820152601760248201527f436f756c646e2774207472616e7366657220746f6b656e00000000000000000060448201526064016102b2565b806111788161190c565b915050610fcd565b50506001600055565b60065460ff166111d25760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102b2565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b600680546001600160a01b0383811661010081810274ffffffffffffffffffffffffffffffffffffffff001985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005b81518110156114935760006001600160a01b03168282815181106112df57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316141561133e5760405162461bcd60e51b815260206004820152601c60248201527f656d7074792061646472657373206973206e6f7420616c6c6f7765640000000060448201526064016102b2565b61137982828151811061136157634e487b7160e01b600052603260045260246000fd5b6020026020010151600261121c90919063ffffffff16565b156113d05760405162461bcd60e51b815260206004820152602160248201527f6475706c6963617465642061646472657373206973206e6f7420616c6c6f77656044820152601960fa1b60648201526084016102b2565b61140b8282815181106113f357634e487b7160e01b600052603260045260246000fd5b6020026020010151600261159d90919063ffffffff16565b61141457600080fd5b7f37bdaf50464e57bc2ca69f36ace378196f59c54486a220a7051208cb4e249da082828151811061145557634e487b7160e01b600052603260045260246000fd5b602002602001015160405161147991906001600160a01b0391909116815260200190565b60405180910390a18061148b8161190c565b9150506112ab565b5050565b60065460ff16156114dd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102b2565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586111ff3390565b600081116115625760405162461bcd60e51b815260206004820152601960248201527f5a65726f2076616c7565206973206e6f7420616c6c6f7765640000000000000060448201526064016102b2565b60078190556040518181527f0f6e30cbea7cb67e47bd9d9c28efec570b560826aef4cf586a3b52a2e45396d19060200160405180910390a150565b600061123a836001600160a01b03841660006115cc838360009081526001919091016020526040902054151590565b61160257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610852565b506000610852565b80356001600160a01b038116811461162157600080fd5b919050565b600060208284031215611637578081fd5b61123a8261160a565b60006020808385031215611652578182fd5b823567ffffffffffffffff80821115611669578384fd5b818501915085601f83011261167c578384fd5b81358181111561168e5761168e61193d565b8060051b604051601f19603f830116810181811085821117156116b3576116b361193d565b604052828152858101935084860182860187018a10156116d1578788fd5b8795505b838610156116fa576116e68161160a565b8552600195909501949386019386016116d5565b5098975050505050505050565b600060208284031215611718578081fd5b8151801515811461123a578182fd5b600060208284031215611738578081fd5b5035919050565b600060208284031215611750578081fd5b5051919050565b60008060006040848603121561176b578182fd5b83359250602084013567ffffffffffffffff80821115611789578384fd5b818601915086601f83011261179c578384fd5b8135818111156117aa578485fd5b8760208260051b85010111156117be578485fd5b6020830194508093505050509250925092565b6001600160a01b0384168152604060208201819052810182905260006001600160fb1b03831115611800578081fd5b8260051b80856060850137919091016060019081529392505050565b6020808252825182820181905260009190848201906040850190845b8181101561185d5783516001600160a01b031683529284019291840191600101611838565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156118b1576118b1611927565b500190565b6000826118d157634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156118f0576118f0611927565b500290565b60008282101561190757611907611927565b500390565b600060001982141561192057611920611927565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220ca492dff4ca8d489d41a62c70a8a26621b2d4f60064a1dece2f08f16b7f09bac64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "availableTokenCount()": {
        "details": "Check whether tokens are still available",
        "returns": {
          "_0": "the available token count"
        }
      },
      "maxSupply()": {
        "details": "Get the max Supply",
        "returns": {
          "_0": "the maximum token count"
        }
      },
      "mint(uint256,uint256[])": {
        "details": "called only when sale is startedcalled only when not paused`_amount` can't zeromust not xceed the cap",
        "params": {
          "_amount": "number of token to be minted",
          "proofIndexes": "user pools index to be used, index should only be used once emit Transfer"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pauses all token transfers. See {ERC721Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "tokenCount()": {
        "details": "Get the current token count",
        "returns": {
          "_0": "the created token count"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpauses all token transfers. See {ERC721Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      },
      "updateSaleStartTime(uint256)": {
        "details": "`__startTimeURI` must be more than the current time",
        "params": {
          "_startTime": "new _startTime"
        }
      },
      "withdraw()": {
        "details": "Withdraw accumulated balance for `wallets`"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mint(uint256,uint256[])": {
        "notice": "caller should pay the required price"
      },
      "updateSaleStartTime(uint256)": {
        "notice": "Only owner can call it"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 793,
        "contract": "contracts/StartfiIDO.sol:StartfiIDO",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4854,
        "contract": "contracts/StartfiIDO.sol:StartfiIDO",
        "label": "_whiteListEnabled",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 4857,
        "contract": "contracts/StartfiIDO.sol:StartfiIDO",
        "label": "_whiteList",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)2986_storage"
      },
      {
        "astId": 4399,
        "contract": "contracts/StartfiIDO.sol:StartfiIDO",
        "label": "_tokenCount",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)1887_storage"
      },
      {
        "astId": 4576,
        "contract": "contracts/StartfiIDO.sol:StartfiIDO",
        "label": "_startTimeSale",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 708,
        "contract": "contracts/StartfiIDO.sol:StartfiIDO",
        "label": "_paused",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 591,
        "contract": "contracts/StartfiIDO.sol:StartfiIDO",
        "label": "_owner",
        "offset": 1,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4655,
        "contract": "contracts/StartfiIDO.sol:StartfiIDO",
        "label": "_mintPrice",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4661,
        "contract": "contracts/StartfiIDO.sol:StartfiIDO",
        "label": "_wallets",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3940,
        "contract": "contracts/StartfiIDO.sol:StartfiIDO",
        "label": "stakes",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IStartFiStakes)5009"
      },
      {
        "astId": 3945,
        "contract": "contracts/StartfiIDO.sol:StartfiIDO",
        "label": "level1",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3950,
        "contract": "contracts/StartfiIDO.sol:StartfiIDO",
        "label": "level2",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3955,
        "contract": "contracts/StartfiIDO.sol:StartfiIDO",
        "label": "level3",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3960,
        "contract": "contracts/StartfiIDO.sol:StartfiIDO",
        "label": "level1Max",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3965,
        "contract": "contracts/StartfiIDO.sol:StartfiIDO",
        "label": "level2Max",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3970,
        "contract": "contracts/StartfiIDO.sol:StartfiIDO",
        "label": "level3Max",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IStartFiStakes)5009": {
        "encoding": "inplace",
        "label": "contract IStartFiStakes",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2986_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2985,
            "contract": "contracts/StartfiIDO.sol:StartfiIDO",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2685_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)1887_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1886,
            "contract": "contracts/StartfiIDO.sol:StartfiIDO",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)2685_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2680,
            "contract": "contracts/StartfiIDO.sol:StartfiIDO",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2684,
            "contract": "contracts/StartfiIDO.sol:StartfiIDO",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
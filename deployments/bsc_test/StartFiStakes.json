{
  "address": "0x220B67583b0705416A750a38e3E8e95852017CEa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lockDuration_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "ChangeLockDuration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "diposter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "diposter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFunds",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "proofIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUserPoolDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "unlocked",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "reservedToIDO",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserPoolLenght",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "updateLockDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "proofIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "validateStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reservAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "proofIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd0d33361044b30ed5bd90065688ecc0bf1b1dbd9c4734a3383f3c910daef9a03",
  "receipt": {
    "to": null,
    "from": "0xe092b1fa25DF5786D151246E492Eed3d15EA4dAA",
    "contractAddress": "0x220B67583b0705416A750a38e3E8e95852017CEa",
    "transactionIndex": 5,
    "gasUsed": "2090264",
    "logsBloom": "0x
    "blockHash": "0x79b04fd80fa7e751f2d9d569e146c2b5d61f4ee49920eff965ef0b6329827713",
    "transactionHash": "0xd0d33361044b30ed5bd90065688ecc0bf1b1dbd9c4734a3383f3c910daef9a03",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 15973297,
        "transactionHash": "0xd0d33361044b30ed5bd90065688ecc0bf1b1dbd9c4734a3383f3c910daef9a03",
        "address": "0x220B67583b0705416A750a38e3E8e95852017CEa",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e092b1fa25df5786d151246e492eed3d15ea4daa",
          "0x000000000000000000000000e092b1fa25df5786d151246e492eed3d15ea4daa"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x79b04fd80fa7e751f2d9d569e146c2b5d61f4ee49920eff965ef0b6329827713"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 15973297,
        "transactionHash": "0xd0d33361044b30ed5bd90065688ecc0bf1b1dbd9c4734a3383f3c910daef9a03",
        "address": "0x220B67583b0705416A750a38e3E8e95852017CEa",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e",
          "0x000000000000000000000000e092b1fa25df5786d151246e492eed3d15ea4daa",
          "0x000000000000000000000000e092b1fa25df5786d151246e492eed3d15ea4daa"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x79b04fd80fa7e751f2d9d569e146c2b5d61f4ee49920eff965ef0b6329827713"
      }
    ],
    "blockNumber": 15973297,
    "cumulativeGasUsed": "3001889",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbf0ffba74bbfe340788a9d951d7b3a1a261e5eb2",
    "0xe092b1fa25DF5786D151246E492Eed3d15EA4dAA",
    7
  ],
  "solcInputHash": "99564d249213b4f902d12c5e3cddcb07",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"ChangeLockDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"diposter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"diposter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFunds\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"proofIndexes\",\"type\":\"uint256[]\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserPoolDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"reservedToIDO\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPoolLenght\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"updateLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"proofIndexes\",\"type\":\"uint256[]\"}],\"name\":\"validateStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reservAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"proofIndexes\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"pause()\":{\"details\":\"Pauses contract. Requirements: - the caller must be the owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Unpauses contract. Requirements: - the caller must be the owner.\"}},\"title\":\"StartFi Stakes [ desc ] : contract to hold users stakes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\": the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StartFiStakes.sol\":\"StartFiStakes\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x313834fba9dbefee1df7717a5e3063ebf567d276e67bc925a03c7f8423f4c50e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a9a31f278ee3ed0568ab7e3c09ecb72bf92f922475a274760b4c58f87f9ad0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/StartFiStakes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport '@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\n\\n/**\\n \\n *@title  StartFi Stakes\\n * [ desc ] : contract to hold users stakes\\n *@notice : the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle\\n */\\n\\ncontract StartFiStakes is Pausable, ReentrancyGuard, AccessControlEnumerable {\\n    /******************************************* decalrations go here ********************************************************* */\\n    uint256 private _lockDuration;\\n    address private _stakingToken;\\n    bytes32 public constant IDO_ROLE = keccak256('IDO_ROLE');\\n    bytes32 public constant OWNER_ROLE = keccak256('OWNER_ROLE');\\n\\n    struct userPools {\\n        uint256 amount;\\n        uint256 registerBlock;\\n        bool reservedToIDO;\\n    }\\n\\n    mapping(address => uint256) stakerTotalStakes;\\n    mapping(address => userPools[]) stakerPools;\\n    /******************************************* modifiers go here ********************************************************* */\\n    modifier onlyIDO() {\\n        require(hasRole(IDO_ROLE, _msgSender()), 'caller is not IDO');\\n\\n        _;\\n    }\\n    modifier onlyOwner() {\\n        require(hasRole(OWNER_ROLE, _msgSender()), 'caller is not the owner');\\n\\n        _;\\n    }\\n    // events\\n\\n    event DepositFunds(address indexed diposter, uint256 amount);\\n    event WithdrawFunds(address indexed diposter, uint256 amount);\\n    event ChangeLockDuration(uint256 duration);\\n\\n    /******************************************* constructor goes here ********************************************************* */\\n\\n    constructor(\\n        address token_,\\n        address _owner,\\n        uint256 lockDuration_\\n    ) {\\n        require(token_ != address(0) && lockDuration_ != 0, 'Zero values are not allowes');\\n        _stakingToken = token_;\\n        _lockDuration = lockDuration_;\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n\\n        _setupRole(OWNER_ROLE, _owner);\\n    }\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n\\n    /**\\n     * @dev Pauses contract.\\n     *\\n     *\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the owner.\\n     */\\n    function pause() external virtual onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses contract.\\n     *\\n     *\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the owner.\\n     */\\n    function unpause() external virtual onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    // deposit\\n    function deposit(address user, uint256 amount) external whenNotPaused nonReentrant {\\n        require(_getAllowance(_msgSender()) >= amount, 'Invalid amount');\\n        IERC20(_stakingToken).transferFrom(_msgSender(), address(this), amount);\\n        stakerPools[user].push(userPools(amount, block.timestamp, false));\\n        stakerTotalStakes[user] += amount;\\n        // stakerFree[user] += amount;\\n        emit DepositFunds(user, amount);\\n    }\\n\\n    function validateStakes(address user, uint256[] calldata proofIndexes)\\n        external\\n        onlyIDO\\n        whenNotPaused\\n        returns (uint256 reservAmount)\\n    {\\n        userPools[] storage _userPools = stakerPools[user];\\n\\n        for (uint256 index = 0; index < proofIndexes.length; index++) {\\n            if (\\n                _userPools[proofIndexes[index]].reservedToIDO == false &&\\n                _userPools[proofIndexes[index]].amount > 0 &&\\n                _userPools[proofIndexes[index]].registerBlock + _lockDuration <= block.timestamp\\n            ) {\\n                reservAmount += _userPools[proofIndexes[index]].amount;\\n                _userPools[proofIndexes[index]].reservedToIDO = true;\\n            }\\n        }\\n    }\\n\\n    function _safeTokenTransfer(address to, uint256 amount) private returns (bool) {\\n        return IERC20(_stakingToken).transfer(to, amount);\\n    }\\n\\n    // withdraw\\n    function withdraw(uint256 amount, uint256[] calldata proofIndexes) external whenNotPaused nonReentrant {\\n        // TODO:check marketplace user reserves\\n        require(stakerTotalStakes[_msgSender()] >= amount, 'Invalid amount');\\n        userPools[] storage _userPools = stakerPools[_msgSender()];\\n        uint256 withdrawnAmount = amount;\\n        for (uint256 index = 0; index < proofIndexes.length; index++) {\\n            if (withdrawnAmount > 0) {\\n                require(\\n                    _userPools[proofIndexes[index]].amount > 0 &&\\n                        _userPools[proofIndexes[index]].registerBlock + _lockDuration <= block.timestamp,\\n                    'fund is locked or already released'\\n                );\\n\\n                if (withdrawnAmount >= _userPools[proofIndexes[index]].amount) {\\n                    _userPools[proofIndexes[index]].amount = 0;\\n                    withdrawnAmount -= _userPools[proofIndexes[index]].amount;\\n                } else {\\n                    _userPools[proofIndexes[index]].amount -= withdrawnAmount;\\n                    withdrawnAmount = 0;\\n                }\\n            }\\n        }\\n        _safeTokenTransfer(_msgSender(), amount);\\n        stakerTotalStakes[_msgSender()] = stakerTotalStakes[_msgSender()] - amount;\\n\\n        emit WithdrawFunds(_msgSender(), amount);\\n    }\\n\\n    function emergencyWithdraw(uint256[] calldata proofIndexes) external whenPaused nonReentrant {\\n        // TODO:check marketplace user reserves\\n        require(stakerTotalStakes[_msgSender()] >= 0, 'Invalid amount');\\n        userPools[] storage _userPools = stakerPools[_msgSender()];\\n        uint256 withdrawnAmount;\\n        for (uint256 index = 0; index < proofIndexes.length; index++) {\\n            withdrawnAmount += _userPools[proofIndexes[index]].amount;\\n            _userPools[proofIndexes[index]].amount = 0;\\n        }\\n        _safeTokenTransfer(_msgSender(), withdrawnAmount);\\n        stakerTotalStakes[_msgSender()] = stakerTotalStakes[_msgSender()] - withdrawnAmount;\\n\\n        emit WithdrawFunds(_msgSender(), withdrawnAmount);\\n    }\\n\\n    function updateLockDuration(uint256 _duration) external onlyOwner whenPaused {\\n        require(_duration > 1 days, 'Lock time must not be less than a day');\\n        _lockDuration = _duration;\\n        emit ChangeLockDuration(_duration);\\n    }\\n\\n    //getpoolinfo\\n    function getReserves(address _owner) external view returns (uint256) {\\n        return stakerTotalStakes[_owner];\\n    }\\n\\n    function getUserPoolLenght(address _user) external view returns (uint256) {\\n        return stakerPools[_user].length;\\n    }\\n\\n    function lockDuration() external view returns (uint256) {\\n        return _lockDuration;\\n    }\\n\\n    function stakingToken() external view returns (address) {\\n        return _stakingToken;\\n    }\\n\\n    function getUserPoolDetails(address _user, uint256 index)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            bool unlocked,\\n            bool reservedToIDO\\n        )\\n    {\\n        amount = stakerPools[_user][index].amount;\\n        unlocked = stakerPools[_user][index].registerBlock + _lockDuration <= block.timestamp;\\n        reservedToIDO = stakerPools[_user][index].reservedToIDO;\\n    }\\n\\n    function _getAllowance(address _owner) private view returns (uint256) {\\n        return IERC20(_stakingToken).allowance(_owner, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x0c3a2d54a378383259b10dfccf4bbffa92b980f2e0632ce8533dd2bcd5065c2f\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200234238038062002342833981016040819052620000349162000293565b6000805460ff19169055600180556001600160a01b038316158015906200005a57508015155b620000ab5760405162461bcd60e51b815260206004820152601b60248201527f5a65726f2076616c75657320617265206e6f7420616c6c6f7765730000000000604482015260640160405180910390fd5b600580546001600160a01b0319166001600160a01b0385161790556004819055620000d86000836200010d565b620001047fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e836200010d565b505050620002d3565b6200012482826200015060201b620014531760201c565b60008281526003602090815260409091206200014b9183906200146162000160821b17901c565b505050565b6200015c828262000180565b5050565b600062000177836001600160a01b03841662000224565b90505b92915050565b60008281526002602090815260408083206001600160a01b038516845290915290205460ff166200015c5760008281526002602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001e03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008181526001830160205260408120546200026d575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200017a565b5060006200017a565b80516001600160a01b03811681146200028e57600080fd5b919050565b600080600060608486031215620002a8578283fd5b620002b38462000276565b9250620002c36020850162000276565b9150604084015190509250925092565b61205f80620002e36000396000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c806372f702f3116100e3578063ca15c8731161008c578063d477edf411610066578063d477edf4146103be578063d547741f146103d1578063e58378bb146103e457600080fd5b8063ca15c87314610385578063ce65807014610398578063d1941b06146103ab57600080fd5b806391d14854116100bd57806391d148541461031d578063a0cf36ea14610356578063a217fddf1461037d57600080fd5b806372f702f3146102dd5780638456cb59146103025780639010d07c1461030a57600080fd5b80633f4ba83a116101455780635915d8061161011f5780635915d806146102965780635a7c12a4146102a95780635c975abb146102d257600080fd5b80633f4ba83a1461024b57806345ffc9db1461025357806347e7ef241461028357600080fd5b80632f2ff15d116101765780632f2ff15d146101fa57806336568abe1461020f5780633e99c1e41461022257600080fd5b806301ffc9a71461019d57806304554443146101c5578063248a9ca3146101d7575b600080fd5b6101b06101ab366004611e4a565b61040b565b60405190151581526020015b60405180910390f35b6004545b6040519081526020016101bc565b6101c96101e5366004611de6565b60009081526002602052604090206001015490565b61020d610208366004611dfe565b610436565b005b61020d61021d366004611dfe565b61045d565b6101c9610230366004611cf2565b6001600160a01b031660009081526006602052604090205490565b61020d61047f565b610266610261366004611d5d565b610547565b6040805193845291151560208401521515908201526060016101bc565b61020d610291366004611d5d565b610666565b61020d6102a4366004611e8a565b6108b9565b6101c96102b7366004611cf2565b6001600160a01b031660009081526007602052604090205490565b60005460ff166101b0565b6005546001600160a01b03165b6040516001600160a01b0390911681526020016101bc565b61020d610d08565b6102ea610318366004611e29565b610dc6565b6101b061032b366004611dfe565b60009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6101c97f062f9ed91714f2528ca4e5fa3c2df24b0c0b0bea3c1478809e723db55d861df681565b6101c9600081565b6101c9610393366004611de6565b610de5565b6101c96103a6366004611d0c565b610dfc565b61020d6103b9366004611d86565b6110f1565b61020d6103cc366004611de6565b6112f5565b61020d6103df366004611dfe565b611449565b6101c97fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e81565b60006001600160e01b03198216635a05180f60e01b1480610430575061043082611476565b92915050565b61044082826114ab565b60008281526003602052604090206104589082611461565b505050565b61046782826114d1565b6000828152600360205260409020610458908261154b565b6104a97fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e3361032b565b6104f45760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b60448201526064015b60405180910390fd5b60005460ff1661053d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104eb565b610545611560565b565b6001600160a01b03821660009081526007602052604081208054829182918590811061058357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600302016000015492504260045460076000886001600160a01b03166001600160a01b0316815260200190815260200160002086815481106105df57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600101546105fb9190611f63565b1115915060076000866001600160a01b03166001600160a01b03168152602001908152602001600020848154811061064357634e487b7160e01b600052603260045260246000fd5b600091825260209091206002600390920201015492959194505060ff9091169150565b60005460ff16156106ac5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104eb565b600260015414156106ff5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104eb565b60026001558061070e336115f3565b101561074d5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b60448201526064016104eb565b6005546001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101849052606401602060405180830381600087803b1580156107ad57600080fd5b505af11580156107c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e59190611dc6565b506001600160a01b03821660008181526007602090815260408083208151606081018352868152428185019081528184018681528354600180820186559488528688209351600390910290930192835590519282019290925590516002909101805460ff191691151591909117905592825260069052908120805483929061086e908490611f63565b90915550506040518181526001600160a01b038316907fd241e73300212f6df233a8e6d3146b88a9d4964e06621d54b5ff6afeba7b1b889060200160405180910390a2505060018055565b60005460ff16156108ff5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104eb565b600260015414156109525760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104eb565b6002600155336000908152600660205260409020548311156109a75760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b60448201526064016104eb565b3360009081526007602052604081209084905b83811015610c8e578115610c7c576000838686848181106109eb57634e487b7160e01b600052603260045260246000fd5b9050602002013581548110610a1057634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160000154118015610a9357504260045484878785818110610a4f57634e487b7160e01b600052603260045260246000fd5b9050602002013581548110610a7457634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160010154610a909190611f63565b11155b610aea5760405162461bcd60e51b815260206004820152602260248201527f66756e64206973206c6f636b6564206f7220616c72656164792072656c656173604482015261195960f21b60648201526084016104eb565b82858583818110610b0b57634e487b7160e01b600052603260045260246000fd5b9050602002013581548110610b3057634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600001548210610c0b57600083868684818110610b6b57634e487b7160e01b600052603260045260246000fd5b9050602002013581548110610b9057634e487b7160e01b600052603260045260246000fd5b600091825260209091206003909102015582858583818110610bc257634e487b7160e01b600052603260045260246000fd5b9050602002013581548110610be757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600302016000015482610c049190611f9a565b9150610c7c565b8183868684818110610c2d57634e487b7160e01b600052603260045260246000fd5b9050602002013581548110610c5257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600302016000016000828254610c729190611f9a565b9091555060009250505b80610c8681611ff8565b9150506109ba565b50610c993386611677565b5033600090815260066020526040902054610cb5908690611f9a565b33600081815260066020908152604091829020939093555187815290917f21901fa892c430ea8bd38b9390225ac8e67eac75ee10ffba16feefc539a288f9910160405180910390a2505060018055505050565b610d327fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e3361032b565b610d785760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b60448201526064016104eb565b60005460ff1615610dbe5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104eb565b6105456116fe565b6000828152600360205260408120610dde9083611779565b9392505050565b600081815260036020526040812061043090611785565b6000610e287f062f9ed91714f2528ca4e5fa3c2df24b0c0b0bea3c1478809e723db55d861df63361032b565b610e685760405162461bcd60e51b815260206004820152601160248201527063616c6c6572206973206e6f742049444f60781b60448201526064016104eb565b60005460ff1615610eae5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104eb565b6001600160a01b0384166000908152600760205260408120905b838110156110e85781858583818110610ef157634e487b7160e01b600052603260045260246000fd5b9050602002013581548110610f1657634e487b7160e01b600052603260045260246000fd5b600091825260209091206002600390920201015460ff16158015610f915750600082868684818110610f5857634e487b7160e01b600052603260045260246000fd5b9050602002013581548110610f7d57634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160000154115b801561100157504260045483878785818110610fbd57634e487b7160e01b600052603260045260246000fd5b9050602002013581548110610fe257634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160010154610ffe9190611f63565b11155b156110d6578185858381811061102757634e487b7160e01b600052603260045260246000fd5b905060200201358154811061104c57634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160000154836110699190611f63565b925060018286868481811061108e57634e487b7160e01b600052603260045260246000fd5b90506020020135815481106110b357634e487b7160e01b600052603260045260246000fd5b60009182526020909120600390910201600201805460ff19169115159190911790555b806110e081611ff8565b915050610ec8565b50509392505050565b60005460ff1661113a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104eb565b6002600154141561118d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104eb565b600260015533600090815260076020526040812090805b8381101561127c57828585838181106111cd57634e487b7160e01b600052603260045260246000fd5b90506020020135815481106111f257634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600001548261120f9190611f63565b915060008386868481811061123457634e487b7160e01b600052603260045260246000fd5b905060200201358154811061125957634e487b7160e01b600052603260045260246000fd5b60009182526020909120600390910201558061127481611ff8565b9150506111a4565b506112873382611677565b50336000908152600660205260409020546112a3908290611f9a565b33600081815260066020908152604091829020939093555183815290917f21901fa892c430ea8bd38b9390225ac8e67eac75ee10ffba16feefc539a288f9910160405180910390a25050600180555050565b61131f7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e3361032b565b6113655760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b60448201526064016104eb565b60005460ff166113ae5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104eb565b62015180811161140e5760405162461bcd60e51b815260206004820152602560248201527f4c6f636b2074696d65206d757374206e6f74206265206c657373207468616e20604482015264612064617960d81b60648201526084016104eb565b60048190556040518181527f2416e279d018f03f6e6e190f55a4363348eca1c39db39c5e2019249d761423239060200160405180910390a150565b610467828261178f565b61145d82826117b5565b5050565b6000610dde836001600160a01b03841661183b565b60006001600160e01b03198216637965db0b60e01b148061043057506301ffc9a760e01b6001600160e01b0319831614610430565b6000828152600260205260409020600101546114c7813361188a565b61045883836117b5565b6001600160a01b03811633146115415760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104eb565b61145d82826118ee565b6000610dde836001600160a01b038416611955565b60005460ff166115a95760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104eb565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600554604051636eb1769f60e11b81526001600160a01b038381166004830152306024830152600092169063dd62ed3e9060440160206040518083038186803b15801561163f57600080fd5b505afa158015611653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104309190611e72565b60055460405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052600092169063a9059cbb90604401602060405180830381600087803b1580156116c657600080fd5b505af11580156116da573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dde9190611dc6565b60005460ff16156117445760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104eb565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115d63390565b6000610dde8383611a72565b6000610430825490565b6000828152600260205260409020600101546117ab813361188a565b61045883836118ee565b6117bf828261032b565b61145d5760008281526002602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117f73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600081815260018301602052604081205461188257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610430565b506000610430565b611894828261032b565b61145d576118ac816001600160a01b03166014611aaa565b6118b7836020611aaa565b6040516020016118c8929190611ebb565b60408051601f198184030181529082905262461bcd60e51b82526104eb91600401611f30565b6118f8828261032b565b1561145d5760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015611a68576000611979600183611f9a565b855490915060009061198d90600190611f9a565b9050818114611a0e5760008660000182815481106119bb57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106119ec57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611a2d57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610430565b6000915050610430565b6000826000018281548110611a9757634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60606000611ab9836002611f7b565b611ac4906002611f63565b67ffffffffffffffff811115611aea57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611b14576020820181803683370190505b509050600360fc1b81600081518110611b3d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611b7a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611b9e846002611f7b565b611ba9906001611f63565b90505b6001811115611c3d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611beb57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611c0f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611c3681611fe1565b9050611bac565b508315610dde5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104eb565b80356001600160a01b0381168114611ca357600080fd5b919050565b60008083601f840112611cb9578182fd5b50813567ffffffffffffffff811115611cd0578182fd5b6020830191508360208260051b8501011115611ceb57600080fd5b9250929050565b600060208284031215611d03578081fd5b610dde82611c8c565b600080600060408486031215611d20578182fd5b611d2984611c8c565b9250602084013567ffffffffffffffff811115611d44578283fd5b611d5086828701611ca8565b9497909650939450505050565b60008060408385031215611d6f578182fd5b611d7883611c8c565b946020939093013593505050565b60008060208385031215611d98578182fd5b823567ffffffffffffffff811115611dae578283fd5b611dba85828601611ca8565b90969095509350505050565b600060208284031215611dd7578081fd5b81518015158114610dde578182fd5b600060208284031215611df7578081fd5b5035919050565b60008060408385031215611e10578182fd5b82359150611e2060208401611c8c565b90509250929050565b60008060408385031215611e3b578182fd5b50508035926020909101359150565b600060208284031215611e5b578081fd5b81356001600160e01b031981168114610dde578182fd5b600060208284031215611e83578081fd5b5051919050565b600080600060408486031215611e9e578283fd5b83359250602084013567ffffffffffffffff811115611d44578283fd5b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611ef3816017850160208801611fb1565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611f24816028840160208801611fb1565b01602801949350505050565b6020815260008251806020840152611f4f816040850160208701611fb1565b601f01601f19169190910160400192915050565b60008219821115611f7657611f76612013565b500190565b6000816000190483118215151615611f9557611f95612013565b500290565b600082821015611fac57611fac612013565b500390565b60005b83811015611fcc578181015183820152602001611fb4565b83811115611fdb576000848401525b50505050565b600081611ff057611ff0612013565b506000190190565b600060001982141561200c5761200c612013565b5060010190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212203b0f540008a729285927fa590434bab6a78fa8e24ce1a41064a4870dc06305fa64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101985760003560e01c806372f702f3116100e3578063ca15c8731161008c578063d477edf411610066578063d477edf4146103be578063d547741f146103d1578063e58378bb146103e457600080fd5b8063ca15c87314610385578063ce65807014610398578063d1941b06146103ab57600080fd5b806391d14854116100bd57806391d148541461031d578063a0cf36ea14610356578063a217fddf1461037d57600080fd5b806372f702f3146102dd5780638456cb59146103025780639010d07c1461030a57600080fd5b80633f4ba83a116101455780635915d8061161011f5780635915d806146102965780635a7c12a4146102a95780635c975abb146102d257600080fd5b80633f4ba83a1461024b57806345ffc9db1461025357806347e7ef241461028357600080fd5b80632f2ff15d116101765780632f2ff15d146101fa57806336568abe1461020f5780633e99c1e41461022257600080fd5b806301ffc9a71461019d57806304554443146101c5578063248a9ca3146101d7575b600080fd5b6101b06101ab366004611e4a565b61040b565b60405190151581526020015b60405180910390f35b6004545b6040519081526020016101bc565b6101c96101e5366004611de6565b60009081526002602052604090206001015490565b61020d610208366004611dfe565b610436565b005b61020d61021d366004611dfe565b61045d565b6101c9610230366004611cf2565b6001600160a01b031660009081526006602052604090205490565b61020d61047f565b610266610261366004611d5d565b610547565b6040805193845291151560208401521515908201526060016101bc565b61020d610291366004611d5d565b610666565b61020d6102a4366004611e8a565b6108b9565b6101c96102b7366004611cf2565b6001600160a01b031660009081526007602052604090205490565b60005460ff166101b0565b6005546001600160a01b03165b6040516001600160a01b0390911681526020016101bc565b61020d610d08565b6102ea610318366004611e29565b610dc6565b6101b061032b366004611dfe565b60009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6101c97f062f9ed91714f2528ca4e5fa3c2df24b0c0b0bea3c1478809e723db55d861df681565b6101c9600081565b6101c9610393366004611de6565b610de5565b6101c96103a6366004611d0c565b610dfc565b61020d6103b9366004611d86565b6110f1565b61020d6103cc366004611de6565b6112f5565b61020d6103df366004611dfe565b611449565b6101c97fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e81565b60006001600160e01b03198216635a05180f60e01b1480610430575061043082611476565b92915050565b61044082826114ab565b60008281526003602052604090206104589082611461565b505050565b61046782826114d1565b6000828152600360205260409020610458908261154b565b6104a97fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e3361032b565b6104f45760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b60448201526064015b60405180910390fd5b60005460ff1661053d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104eb565b610545611560565b565b6001600160a01b03821660009081526007602052604081208054829182918590811061058357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600302016000015492504260045460076000886001600160a01b03166001600160a01b0316815260200190815260200160002086815481106105df57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600101546105fb9190611f63565b1115915060076000866001600160a01b03166001600160a01b03168152602001908152602001600020848154811061064357634e487b7160e01b600052603260045260246000fd5b600091825260209091206002600390920201015492959194505060ff9091169150565b60005460ff16156106ac5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104eb565b600260015414156106ff5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104eb565b60026001558061070e336115f3565b101561074d5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b60448201526064016104eb565b6005546001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101849052606401602060405180830381600087803b1580156107ad57600080fd5b505af11580156107c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e59190611dc6565b506001600160a01b03821660008181526007602090815260408083208151606081018352868152428185019081528184018681528354600180820186559488528688209351600390910290930192835590519282019290925590516002909101805460ff191691151591909117905592825260069052908120805483929061086e908490611f63565b90915550506040518181526001600160a01b038316907fd241e73300212f6df233a8e6d3146b88a9d4964e06621d54b5ff6afeba7b1b889060200160405180910390a2505060018055565b60005460ff16156108ff5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104eb565b600260015414156109525760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104eb565b6002600155336000908152600660205260409020548311156109a75760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b60448201526064016104eb565b3360009081526007602052604081209084905b83811015610c8e578115610c7c576000838686848181106109eb57634e487b7160e01b600052603260045260246000fd5b9050602002013581548110610a1057634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160000154118015610a9357504260045484878785818110610a4f57634e487b7160e01b600052603260045260246000fd5b9050602002013581548110610a7457634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160010154610a909190611f63565b11155b610aea5760405162461bcd60e51b815260206004820152602260248201527f66756e64206973206c6f636b6564206f7220616c72656164792072656c656173604482015261195960f21b60648201526084016104eb565b82858583818110610b0b57634e487b7160e01b600052603260045260246000fd5b9050602002013581548110610b3057634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600001548210610c0b57600083868684818110610b6b57634e487b7160e01b600052603260045260246000fd5b9050602002013581548110610b9057634e487b7160e01b600052603260045260246000fd5b600091825260209091206003909102015582858583818110610bc257634e487b7160e01b600052603260045260246000fd5b9050602002013581548110610be757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600302016000015482610c049190611f9a565b9150610c7c565b8183868684818110610c2d57634e487b7160e01b600052603260045260246000fd5b9050602002013581548110610c5257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600302016000016000828254610c729190611f9a565b9091555060009250505b80610c8681611ff8565b9150506109ba565b50610c993386611677565b5033600090815260066020526040902054610cb5908690611f9a565b33600081815260066020908152604091829020939093555187815290917f21901fa892c430ea8bd38b9390225ac8e67eac75ee10ffba16feefc539a288f9910160405180910390a2505060018055505050565b610d327fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e3361032b565b610d785760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b60448201526064016104eb565b60005460ff1615610dbe5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104eb565b6105456116fe565b6000828152600360205260408120610dde9083611779565b9392505050565b600081815260036020526040812061043090611785565b6000610e287f062f9ed91714f2528ca4e5fa3c2df24b0c0b0bea3c1478809e723db55d861df63361032b565b610e685760405162461bcd60e51b815260206004820152601160248201527063616c6c6572206973206e6f742049444f60781b60448201526064016104eb565b60005460ff1615610eae5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104eb565b6001600160a01b0384166000908152600760205260408120905b838110156110e85781858583818110610ef157634e487b7160e01b600052603260045260246000fd5b9050602002013581548110610f1657634e487b7160e01b600052603260045260246000fd5b600091825260209091206002600390920201015460ff16158015610f915750600082868684818110610f5857634e487b7160e01b600052603260045260246000fd5b9050602002013581548110610f7d57634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160000154115b801561100157504260045483878785818110610fbd57634e487b7160e01b600052603260045260246000fd5b9050602002013581548110610fe257634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160010154610ffe9190611f63565b11155b156110d6578185858381811061102757634e487b7160e01b600052603260045260246000fd5b905060200201358154811061104c57634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160000154836110699190611f63565b925060018286868481811061108e57634e487b7160e01b600052603260045260246000fd5b90506020020135815481106110b357634e487b7160e01b600052603260045260246000fd5b60009182526020909120600390910201600201805460ff19169115159190911790555b806110e081611ff8565b915050610ec8565b50509392505050565b60005460ff1661113a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104eb565b6002600154141561118d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104eb565b600260015533600090815260076020526040812090805b8381101561127c57828585838181106111cd57634e487b7160e01b600052603260045260246000fd5b90506020020135815481106111f257634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600001548261120f9190611f63565b915060008386868481811061123457634e487b7160e01b600052603260045260246000fd5b905060200201358154811061125957634e487b7160e01b600052603260045260246000fd5b60009182526020909120600390910201558061127481611ff8565b9150506111a4565b506112873382611677565b50336000908152600660205260409020546112a3908290611f9a565b33600081815260066020908152604091829020939093555183815290917f21901fa892c430ea8bd38b9390225ac8e67eac75ee10ffba16feefc539a288f9910160405180910390a25050600180555050565b61131f7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e3361032b565b6113655760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b60448201526064016104eb565b60005460ff166113ae5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104eb565b62015180811161140e5760405162461bcd60e51b815260206004820152602560248201527f4c6f636b2074696d65206d757374206e6f74206265206c657373207468616e20604482015264612064617960d81b60648201526084016104eb565b60048190556040518181527f2416e279d018f03f6e6e190f55a4363348eca1c39db39c5e2019249d761423239060200160405180910390a150565b610467828261178f565b61145d82826117b5565b5050565b6000610dde836001600160a01b03841661183b565b60006001600160e01b03198216637965db0b60e01b148061043057506301ffc9a760e01b6001600160e01b0319831614610430565b6000828152600260205260409020600101546114c7813361188a565b61045883836117b5565b6001600160a01b03811633146115415760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104eb565b61145d82826118ee565b6000610dde836001600160a01b038416611955565b60005460ff166115a95760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104eb565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600554604051636eb1769f60e11b81526001600160a01b038381166004830152306024830152600092169063dd62ed3e9060440160206040518083038186803b15801561163f57600080fd5b505afa158015611653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104309190611e72565b60055460405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052600092169063a9059cbb90604401602060405180830381600087803b1580156116c657600080fd5b505af11580156116da573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dde9190611dc6565b60005460ff16156117445760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104eb565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115d63390565b6000610dde8383611a72565b6000610430825490565b6000828152600260205260409020600101546117ab813361188a565b61045883836118ee565b6117bf828261032b565b61145d5760008281526002602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117f73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600081815260018301602052604081205461188257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610430565b506000610430565b611894828261032b565b61145d576118ac816001600160a01b03166014611aaa565b6118b7836020611aaa565b6040516020016118c8929190611ebb565b60408051601f198184030181529082905262461bcd60e51b82526104eb91600401611f30565b6118f8828261032b565b1561145d5760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015611a68576000611979600183611f9a565b855490915060009061198d90600190611f9a565b9050818114611a0e5760008660000182815481106119bb57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106119ec57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611a2d57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610430565b6000915050610430565b6000826000018281548110611a9757634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60606000611ab9836002611f7b565b611ac4906002611f63565b67ffffffffffffffff811115611aea57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611b14576020820181803683370190505b509050600360fc1b81600081518110611b3d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611b7a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611b9e846002611f7b565b611ba9906001611f63565b90505b6001811115611c3d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611beb57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611c0f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611c3681611fe1565b9050611bac565b508315610dde5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104eb565b80356001600160a01b0381168114611ca357600080fd5b919050565b60008083601f840112611cb9578182fd5b50813567ffffffffffffffff811115611cd0578182fd5b6020830191508360208260051b8501011115611ceb57600080fd5b9250929050565b600060208284031215611d03578081fd5b610dde82611c8c565b600080600060408486031215611d20578182fd5b611d2984611c8c565b9250602084013567ffffffffffffffff811115611d44578283fd5b611d5086828701611ca8565b9497909650939450505050565b60008060408385031215611d6f578182fd5b611d7883611c8c565b946020939093013593505050565b60008060208385031215611d98578182fd5b823567ffffffffffffffff811115611dae578283fd5b611dba85828601611ca8565b90969095509350505050565b600060208284031215611dd7578081fd5b81518015158114610dde578182fd5b600060208284031215611df7578081fd5b5035919050565b60008060408385031215611e10578182fd5b82359150611e2060208401611c8c565b90509250929050565b60008060408385031215611e3b578182fd5b50508035926020909101359150565b600060208284031215611e5b578081fd5b81356001600160e01b031981168114610dde578182fd5b600060208284031215611e83578081fd5b5051919050565b600080600060408486031215611e9e578283fd5b83359250602084013567ffffffffffffffff811115611d44578283fd5b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611ef3816017850160208801611fb1565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611f24816028840160208801611fb1565b01602801949350505050565b6020815260008251806020840152611f4f816040850160208701611fb1565b601f01601f19169190910160400192915050565b60008219821115611f7657611f76612013565b500190565b6000816000190483118215151615611f9557611f95612013565b500290565b600082821015611fac57611fac612013565b500390565b60005b83811015611fcc578181015183820152602001611fb4565b83811115611fdb576000848401525b50505050565b600081611ff057611ff0612013565b506000190190565b600060001982141561200c5761200c612013565b5060010190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212203b0f540008a729285927fa590434bab6a78fa8e24ce1a41064a4870dc06305fa64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "pause()": {
        "details": "Pauses contract. Requirements: - the caller must be the owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "Unpauses contract. Requirements: - the caller must be the owner."
      }
    },
    "title": "StartFi Stakes [ desc ] : contract to hold users stakes",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": ": the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 708,
        "contract": "contracts/StartFiStakes.sol:StartFiStakes",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 793,
        "contract": "contracts/StartFiStakes.sol:StartFiStakes",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 24,
        "contract": "contracts/StartFiStakes.sol:StartFiStakes",
        "label": "_roles",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 325,
        "contract": "contracts/StartFiStakes.sol:StartFiStakes",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2986_storage)"
      },
      {
        "astId": 3288,
        "contract": "contracts/StartFiStakes.sol:StartFiStakes",
        "label": "_lockDuration",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3290,
        "contract": "contracts/StartFiStakes.sol:StartFiStakes",
        "label": "_stakingToken",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3311,
        "contract": "contracts/StartFiStakes.sol:StartFiStakes",
        "label": "stakerTotalStakes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3317,
        "contract": "contracts/StartFiStakes.sol:StartFiStakes",
        "label": "stakerPools",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_struct(userPools)3307_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(userPools)3307_storage)dyn_storage": {
        "base": "t_struct(userPools)3307_storage",
        "encoding": "dynamic_array",
        "label": "struct StartFiStakes.userPools[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(userPools)3307_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StartFiStakes.userPools[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(userPools)3307_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2986_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2986_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2986_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2985,
            "contract": "contracts/StartFiStakes.sol:StartFiStakes",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2685_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/StartFiStakes.sol:StartFiStakes",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/StartFiStakes.sol:StartFiStakes",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2685_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2680,
            "contract": "contracts/StartFiStakes.sol:StartFiStakes",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2684,
            "contract": "contracts/StartFiStakes.sol:StartFiStakes",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(userPools)3307_storage": {
        "encoding": "inplace",
        "label": "struct StartFiStakes.userPools",
        "members": [
          {
            "astId": 3302,
            "contract": "contracts/StartFiStakes.sol:StartFiStakes",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3304,
            "contract": "contracts/StartFiStakes.sol:StartFiStakes",
            "label": "registerBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3306,
            "contract": "contracts/StartFiStakes.sol:StartFiStakes",
            "label": "reservedToIDO",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "language": "Solidity",
  "sources": {
    "contracts/AirdropedStartfiIDO.sol": {
      "content": "pragma solidity 0.8.4;\n\n//SPDX-License-Identifier: AGPL-3.0-only\n/*\n        ,                                                                       \n  %%%%%%%%%%%%%%                                                      %%%%%%%   \n %%%           ./    %%                                %%%          %%%       %%\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\n  ,,,,,,,,,,,,,,                                                                */\n\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport './extensions/WithLimitedSupply.sol';\nimport './extensions/WithTokenPayment.sol';\nimport './extensions/WithStartTime.sol';\nimport './extensions/PausableERC20.sol';\nimport './extensions/WithWhiteListSupport.sol';\nimport './interface/IStartFiStakes.sol';\n\ncontract AirdropedStartfiIDO is\n    WithWhiteListSupport,\n    WithLimitedSupply,\n    WithStartTime,\n    PausableERC20,\n    WithTokenPayment\n{\n    /**************************libraries ********** */\n    using Strings for uint256;\n    /***************************Declarations go here ********** */\n    IStartFiStakes stakes;\n    uint256 private _baseAllocation = 500000 * 1 ether;\n    uint256 _level1 = 270 * 1 ether;\n    uint256 _level2 = 7000 * 1 ether;\n    uint256 _level3 = 14000 * 1 ether;\n    uint256 _level1Max = _baseAllocation * 1;\n    uint256 _level2Max = _baseAllocation * 3;\n    uint256 _level3Max = _baseAllocation * 6;\n    event AirDropRequested(address beneficiary, uint256 amount, uint256 price);\n\n    // modifier\n    /******************************************* constructor goes here ********************************************************* */\n    constructor(\n        uint256 startTimeSale_,\n        uint256 mintPrice_,\n        uint256 maxSupply_,\n        address[] memory wallets_,\n        address _paymentToken,\n        address staking,\n        address owner_\n    )\n        WithLimitedSupply(maxSupply_)\n        WithTokenPayment(wallets_, _paymentToken, mintPrice_)\n        PausableERC20(owner_)\n        WithStartTime(startTimeSale_)\n    {\n        stakes = IStartFiStakes(staking);\n    }\n\n    /******************************************* read state functions go here ********************************************************* */\n\n    /// @notice caller should pay the required price\n    /// @dev  called only when sale is started\n    /// @dev  called only when not paused\n    /// @dev  `_amount` can't zero\n    /// @dev must not xceed the cap\n    /// @param _amount number of token to be minted\n    /// @param proofIndexes user pools index to be used, index should only be used once\n    /// emit Transfer\n    function mint(uint256 _amount, uint256[] calldata proofIndexes)\n        external\n        whenNotPaused\n        isSaleStarted\n        isWithinCapLimit(_amount)\n    {\n        if (whilteListStatus()) {\n            require(isWhiteListed(_msgSender()), 'Must be white listed');\n        }\n        // get max amount user can buy\n        require(_amount > 0, 'invalid_amount');\n        uint256 tokenAmount;\n        uint256 totalStakesForGivenIndexes = stakes.validateStakes(_msgSender(), proofIndexes);\n        require(totalStakesForGivenIndexes > 0, 'No Participation with zero stakes');\n        if (totalStakesForGivenIndexes <= _level1) {\n            tokenAmount = _amount > _level1Max ? _level1Max : _amount;\n        } else if (totalStakesForGivenIndexes <= _level2) {\n            tokenAmount = _amount > _level2Max ? _level2Max : _amount;\n        } else {\n            tokenAmount = _amount > _level3Max ? _level3Max : _amount;\n        }\n        uint256 _price = mintPrice() * tokenAmount;\n        require(tokenAmount <= availableTokenCount(), 'Insufficient contract balance');\n        require(_price <= _getAllowance(_msgSender()), 'Insufficient price value');\n        require(_transferPayment(_msgSender(), _price), 'Payment failed');\n        _increase(tokenAmount);\n        emit AirDropRequested(_msgSender(), tokenAmount, _price);\n    }\n\n    /// @notice Only owner can call it\n    /// @dev  `__startTimeURI` must be more than the current time\n    /// @param _startTime new _startTime\n    function updateSaleStartTime(uint256 _startTime) external onlyOwner isSaleNotStarted {\n        _setSaleStartTime(_startTime);\n    }\n\n    function update_levelsAllocation(uint256 baseAllocation_) external onlyOwner whenPaused {\n        require(baseAllocation_ != 0, 'Zero value is not accepted');\n        _baseAllocation = baseAllocation_;\n    }\n\n    function setMintPrice(uint256 price_) external onlyOwner whenPaused {\n        _setMintPrice(price_);\n    }\n\n    /**\n     * @dev Withdraw accumulated balance for `wallets`\n     *\n     */\n    function withdraw() external onlyOwner {\n        _withdraw();\n    }\n\n    function toggleWhiteListStatus() external onlyOwner {\n        _toggleWhiteListStatus();\n    }\n\n    function setWhiteList(address[] memory _list) external onlyOwner {\n        _setWhiteList(_list);\n    }\n\n    function baseAllocation() external view returns (uint256) {\n        return _baseAllocation;\n    }\n\n    function level1() external view returns (uint256, uint256) {\n        return (_level1, _level1Max);\n    }\n\n    function level2() external view returns (uint256, uint256) {\n        return (_level2, _level2Max);\n    }\n\n    function level3() external view returns (uint256, uint256) {\n        return (_level3, _level3Max);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/extensions/WithLimitedSupply.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport '@openzeppelin/contracts/utils/Counters.sol';\n\n/// @author 1001.digital - edit mhjey - edit\n/// @title A token tracker that limits the token supply and increments token IDs on each new mint.\nabstract contract WithLimitedSupply {\n    using Counters for Counters.Counter;\n\n    // Keeps track of how many we have minted\n    uint256 private _tokenCount;\n\n    /// @dev The maximum count of tokens this token tracker will hold.\n    uint256 private immutable _maxSupply;\n\n    modifier isWithinCapLimit(uint256 tokenAmount) virtual {\n        require((_tokenCount + tokenAmount) <= _maxSupply, 'Purchase exceeds max supply');\n        _;\n    }\n    /// @dev Check whether another token is still available\n    modifier ensureAvailability() {\n        require(availableTokenCount() > 0, 'No more tokens available');\n        _;\n    }\n\n    /// @param amount Check whether number of tokens are still available\n    /// @dev Check whether tokens are still available\n    modifier ensureAvailabilityFor(uint256 amount) {\n        require(availableTokenCount() >= amount, 'Requested number of tokens not available');\n        _;\n    }\n\n    /// Instanciate the contract\n    /// @param totalSupply_ how many tokens this collection should hold\n    constructor(uint256 totalSupply_) {\n        _maxSupply = totalSupply_;\n    }\n\n    /// @dev Get the max Supply\n    /// @return the maximum token count\n    function maxSupply() public view returns (uint256) {\n        return _maxSupply;\n    }\n\n    /// @dev Get the current token count\n    /// @return the created token count\n    function tokenCount() public view returns (uint256) {\n        return _tokenCount;\n    }\n\n    /// @dev Check whether tokens are still available\n    /// @return the available token count\n    function availableTokenCount() public view returns (uint256) {\n        return maxSupply() - tokenCount();\n    }\n\n    /// @dev Increment the token count and fetch the latest count\n    /// @return the next token id\n    function _increase(uint256 amount) internal virtual ensureAvailabilityFor(amount) returns (uint256) {\n        _tokenCount += amount;\n\n        return _tokenCount;\n    }\n}\n"
    },
    "contracts/extensions/WithTokenPayment.sol": {
      "content": "pragma solidity 0.8.4;\n\n//SPDX-License-Identifier: AGPL-3.0-only\n/*\n        ,                                                                       \n  %%%%%%%%%%%%%%                                                      %%%%%%%   \n %%%           ./    %%                                %%%          %%%       %%\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\n  ,,,,,,,,,,,,,,                                                                */\n\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\n\n/// @title  WithTokenPayment contract\n//\ncontract WithTokenPayment is ReentrancyGuard {\n    /**************************libraries ********** */\n\n    /***************************Declarations go here ********** */\n    // stat var\n    uint256 private _mintPrice;\n\n    IERC20 private immutable _erc20Token;\n    address[] private _wallets;\n\n    // event\n    event UpdateMintPrice(uint256 newParice);\n    event Withdrawn(address payee, uint256 amount);\n\n    // modifier\n\n    /******************************************* constructor goes here ********************************************************* */\n    constructor(\n        address[] memory wallets_,\n        address token_,\n        uint256 mintPrice_\n    ) {\n        _wallets = wallets_;\n        _mintPrice = mintPrice_;\n\n        _erc20Token = IERC20(token_);\n    }\n\n    /******************************************* read state functions go here ********************************************************* */\n\n    /******************************************* modify state functions go here ********************************************************* */\n    function _getAllowance(address owner) internal view returns (uint256) {\n        return _erc20Token.allowance(owner, address(this));\n    }\n\n    function mintPrice() public view returns (uint256) {\n        return _mintPrice;\n    }\n\n    function _transferPayment(address sender, uint256 amount) internal nonReentrant returns (bool) {\n        return _erc20Token.transferFrom(sender, address(this), amount);\n    }\n\n    function getWallets() external view returns (address[] memory) {\n        return _wallets;\n    }\n\n    function getBalanceOf(address user) internal view returns (uint256) {\n        return _erc20Token.balanceOf(user);\n    }\n\n    /**\n     * @dev Withdraw accumulated balance for a wallet 1 and wallet 2, forwarding all gas to the\n     * recipient.\n     *\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n     * Make sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     *\n     */\n    function _withdraw() internal virtual nonReentrant {\n        uint256 share = _erc20Token.balanceOf(address(this)) / _wallets.length;\n        require(share > 0, \"Can't split zero shares\");\n        for (uint256 index = 0; index < _wallets.length; index++) {\n            emit Withdrawn(_wallets[index], share);\n\n            require(_erc20Token.transfer(_wallets[index], share), \"Couldn't transfer token\");\n        }\n    }\n\n    function _setMintPrice(uint256 mintPrice_) internal {\n        require(mintPrice_ > 0, 'Zero value is not allowed');\n        _mintPrice = mintPrice_;\n        emit UpdateMintPrice(mintPrice_);\n    }\n}\n"
    },
    "contracts/extensions/WithStartTime.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\n/// @title mange start time for sale\nabstract contract WithStartTime {\n    uint256 private _startTimeSale;\n\n    constructor(uint256 startTime_) {\n        _startTimeSale = startTime_;\n    }\n\n    modifier isSaleStarted() {\n        require(_startTimeSale <= block.timestamp && _startTimeSale != 0, 'Sale did not start yet');\n\n        _;\n    }\n    modifier isSaleNotStarted() {\n        require(_startTimeSale > block.timestamp || _startTimeSale == 0, 'Sale has started');\n\n        _;\n    }\n\n    /// @notice Only woner can call it\n    /// @dev  `__startTimeURI` must be more than the current time\n    /// @param _startTime new _startTime\n    function _setSaleStartTime(uint256 _startTime) internal {\n        require(_startTime > block.timestamp, 'Can not set time back');\n        _startTimeSale = _startTime;\n    }\n\n    function startTimeSale() external view returns (uint256) {\n        return _startTimeSale;\n    }\n}\n"
    },
    "contracts/extensions/PausableERC20.sol": {
      "content": "pragma solidity 0.8.4;\n\n//SPDX-License-Identifier: AGPL-3.0-only\n/*\n        ,                                                                       \n  %%%%%%%%%%%%%%                                                      %%%%%%%   \n %%%           ./    %%                                %%%          %%%       %%\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\n  ,,,,,,,,,,,,,,                                                                */\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/security/Pausable.sol';\n\n/// @title  AnyERC20 With Eth contract\n//\n/// @author startfi team\nabstract contract PausableERC20 is Pausable, Ownable {\n    /**************************libraries ********** */\n\n    /***************************Declarations go here ********** */\n    // stat var\n\n    // tokenID => timestamp\n\n    // event\n\n    // modifier\n    /******************************************* constructor goes here ********************************************************* */\n    constructor(address owner_) {\n        transferOwnership(owner_);\n    }\n\n    /******************************************* modify state functions go here ********************************************************* */\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() external virtual onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() external virtual onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "contracts/extensions/WithWhiteListSupport.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\nimport '@openzeppelin/contracts/utils/structs/EnumerableMap.sol';\n\nabstract contract WithWhiteListSupport {\n    // Add the library methods\n    using EnumerableSet for EnumerableSet.AddressSet;\n    bool private _whiteListEnabled = false;\n    // Declare a set state variable\n    EnumerableSet.AddressSet private _whiteList;\n    event WhiteListPriceUpdated(uint256 newPrice, uint256 oldPrice);\n    event WhiteListUpdated(address beneficiary);\n\n    /// @dev to be override by the child contract to add access control modifier\n    function _toggleWhiteListStatus() internal virtual {\n        _whiteListEnabled = !_whiteListEnabled;\n    }\n\n    /// @dev to be override by the child contract to add access control modifier\n    function _setWhiteList(address[] memory _list) internal virtual {\n        // require(whiteList.length()==0,\"Already initialzed\");\n        // require(_list.length > 0, 'Empty list is not allowed');\n        for (uint256 index = 0; index < _list.length; index++) {\n            require(_list[index] != address(0), 'empty address is not allowed');\n            require(!_whiteList.contains(_list[index]), 'duplicated address is not allowed');\n            require(_whiteList.add(_list[index]));\n            emit WhiteListUpdated(_list[index]);\n        }\n    }\n\n    function isWhiteListed(address _beneficiary) public view returns (bool) {\n        return _whiteList.contains(_beneficiary);\n    }\n\n    function whilteListStatus() public view returns (bool) {\n        return _whiteListEnabled;\n    }\n}\n"
    },
    "contracts/interface/IStartFiStakes.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity 0.8.4;\n\n/**\n \n *@title  IStartFi Stakes\n * [ desc ] : contract to hold users stakes\n *@notice : the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle\n */\n\ninterface IStartFiStakes {\n    /******************************************* decalrations go here ********************************************************* */\n\n    event DepositFunds(address indexed diposter, uint256 amount);\n    event WithdrawFunds(address indexed diposter, uint256 amount);\n    event ChangeLockDuration(uint256 duration);\n\n    /******************************************* constructor goes here ********************************************************* */\n\n    // deposit\n    function deposit(address user, uint256 amount) external;\n\n    function validateStakes(address user, uint256[] calldata proofIndexes) external returns (uint256 reservAmount);\n\n    // withdraw\n    function withdraw(uint256 amount, uint256[] calldata proofIndexes) external;\n\n    function emergencyWithdraw(uint256[] calldata proofIndexes) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./EnumerableSet.sol\";\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMap {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct Map {\n        // Storage of keys\n        EnumerableSet.Bytes32Set _keys;\n        mapping(bytes32 => bytes32) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(\n        Map storage map,\n        bytes32 key,\n        bytes32 value\n    ) private returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        bytes32 key = map._keys.at(index);\n        return (key, map._values[key]);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\n        bytes32 value = map._values[key];\n        if (value == bytes32(0)) {\n            return (_contains(map, key), bytes32(0));\n        } else {\n            return (true, value);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || _contains(map, key), \"EnumerableMap: nonexistent key\");\n        return value;\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\n     */\n    function _get(\n        Map storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) private view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || _contains(map, key), errorMessage);\n        return value;\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        UintToAddressMap storage map,\n        uint256 key,\n        address value\n    ) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        UintToAddressMap storage map,\n        uint256 key,\n        string memory errorMessage\n    ) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/StartfiIDO.sol": {
      "content": "pragma solidity 0.8.4;\n\n//SPDX-License-Identifier: AGPL-3.0-only\n/*\n        ,                                                                       \n  %%%%%%%%%%%%%%                                                      %%%%%%%   \n %%%           ./    %%                                %%%          %%%       %%\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\n  ,,,,,,,,,,,,,,                                                                */\n\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport './extensions/WithLimitedSupply.sol';\nimport './extensions/WithTokenPayment.sol';\nimport './extensions/WithStartTime.sol';\nimport './extensions/PausableERC20.sol';\nimport './extensions/WithMintedERC20.sol';\nimport './extensions/WithWhiteListSupport.sol';\nimport './interface/IStartFiStakes.sol';\n\ncontract StartfiIDO is\n    WithMintedERC20,\n    WithWhiteListSupport,\n    WithLimitedSupply,\n    WithStartTime,\n    PausableERC20,\n    WithTokenPayment\n{\n    /**************************libraries ********** */\n    using Strings for uint256;\n    /***************************Declarations go here ********** */\n    IStartFiStakes stakes;\n    uint256 private _baseAllocation = 500000 * 1 ether;\n    uint256 _level1 = 2700 * 1 ether;\n    uint256 _level2 = 7000 * 1 ether;\n    uint256 _level3 = 14000 * 1 ether;\n    uint256 _level1Max = _baseAllocation * 1;\n    uint256 _level2Max = _baseAllocation * 3;\n    uint256 _level3Max = _baseAllocation * 6;\n\n    // modifier\n    /******************************************* constructor goes here ********************************************************* */\n    constructor(\n        uint256 startTimeSale_,\n        uint256 mintPrice_,\n        uint256 maxSupply_,\n        address[] memory wallets_,\n        address _paymentToken,\n        address _token,\n        address staking,\n        address owner_\n    )\n        WithLimitedSupply(maxSupply_)\n        WithTokenPayment(wallets_, _paymentToken, mintPrice_)\n        PausableERC20(owner_)\n        WithStartTime(startTimeSale_)\n        WithMintedERC20(_token)\n    {\n        stakes = IStartFiStakes(staking);\n    }\n\n    /******************************************* read state functions go here ********************************************************* */\n\n    /// @notice caller should pay the required price\n    /// @dev  called only when sale is started\n    /// @dev  called only when not paused\n    /// @dev  `_amount` can't zero\n    /// @dev must not xceed the cap\n    /// @param _amount number of token to be minted\n    /// @param proofIndexes user pools index to be used, index should only be used once\n    /// emit Transfer\n    function mint(uint256 _amount, uint256[] calldata proofIndexes)\n        external\n        whenNotPaused\n        isSaleStarted\n        isWithinCapLimit(_amount)\n    {\n        if (whilteListStatus()) {\n            require(isWhiteListed(_msgSender()), 'Must be white listed');\n        }\n        // get max amount user can buy\n        require(_amount > 0, 'invalid_amount');\n        uint256 tokenAmount;\n        uint256 totalStakesForGivenIndexes = stakes.validateStakes(_msgSender(), proofIndexes);\n        require(totalStakesForGivenIndexes > 0, 'No Participation with zero stakes');\n        if (totalStakesForGivenIndexes <= _level1) {\n            tokenAmount = _amount > _level1Max ? _level1Max : _amount;\n        } else if (totalStakesForGivenIndexes <= _level2) {\n            tokenAmount = _amount > _level2Max ? _level2Max : _amount;\n        } else {\n            tokenAmount = _amount > _level3Max ? _level3Max : _amount;\n        }\n        uint256 _price = mintPrice() * tokenAmount;\n        require(tokenAmount <= _balance(), 'Insufficient contract balance');\n        require(_price <= _getAllowance(_msgSender()), 'Insufficient price value');\n        require(_transferPayment(_msgSender(), _price), 'Payment failed');\n        _increase(tokenAmount);\n        require(_transferToken(_msgSender(), tokenAmount), 'transfer token failed');\n    }\n\n    /// @notice Only owner can call it\n    /// @dev  `__startTimeURI` must be more than the current time\n    /// @param _startTime new _startTime\n    function updateSaleStartTime(uint256 _startTime) external onlyOwner isSaleNotStarted {\n        _setSaleStartTime(_startTime);\n    }\n\n    function update_levelsAllocation(uint256 baseAllocation_) external onlyOwner whenPaused {\n        require(baseAllocation_ != 0, 'Zero value is not accepted');\n        _baseAllocation = baseAllocation_;\n    }\n\n    function setMintPrice(uint256 price_) external onlyOwner whenPaused {\n        _setMintPrice(price_);\n    }\n\n    /**\n     * @dev Withdraw accumulated balance for `wallets`\n     *\n     */\n    function withdraw() external onlyOwner {\n        _withdraw();\n    }\n\n    function toggleWhiteListStatus() external onlyOwner {\n        _toggleWhiteListStatus();\n    }\n\n    function setWhiteList(address[] memory _list) external onlyOwner {\n        _setWhiteList(_list);\n    }\n\n    function baseAllocation() external view returns (uint256) {\n        return _baseAllocation;\n    }\n\n    function level1() external view returns (uint256, uint256) {\n        return (_level1, _level1Max);\n    }\n\n    function level2() external view returns (uint256, uint256) {\n        return (_level2, _level2Max);\n    }\n\n    function level3() external view returns (uint256, uint256) {\n        return (_level3, _level3Max);\n    }\n}\n"
    },
    "contracts/extensions/WithMintedERC20.sol": {
      "content": "pragma solidity 0.8.4;\n\n//SPDX-License-Identifier: AGPL-3.0-only\n/*\n        ,                                                                       \n  %%%%%%%%%%%%%%                                                      %%%%%%%   \n %%%           ./    %%                                %%%          %%%       %%\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\n  ,,,,,,,,,,,,,,                                                                */\n\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\n\n/// @title  WithTokenPayment contract\n//\ncontract WithMintedERC20 is ReentrancyGuard {\n    /**************************libraries ********** */\n\n    /***************************Declarations go here ********** */\n    // stat var\n\n    IERC20 private immutable _erc20Token;\n\n    // modifier\n\n    /******************************************* constructor goes here ********************************************************* */\n    constructor(address token_) {\n        _erc20Token = IERC20(token_);\n    }\n\n    /******************************************* read state functions go here ********************************************************* */\n\n    /******************************************* modify state functions go here ********************************************************* */\n\n    function _transferToken(address sender, uint256 amount) internal nonReentrant returns (bool) {\n        return _erc20Token.transfer(sender, amount);\n    }\n\n    function _balance() internal nonReentrant returns (uint256) {\n        return _erc20Token.balanceOf(address(this));\n    }\n}\n"
    },
    "contracts/AirdropedStartfiIDOWithStakingMigrated.sol": {
      "content": "pragma solidity 0.8.4;\n\n//SPDX-License-Identifier: AGPL-3.0-only\n/*\n        ,                                                                       \n  %%%%%%%%%%%%%%                                                      %%%%%%%   \n %%%           ./    %%                                %%%          %%%       %%\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\n  ,,,,,,,,,,,,,,                                                                */\n\nimport './extensions/WithLimitedSupply.sol';\nimport './extensions/WithTokenPayment.sol';\nimport './extensions/WithStartTime.sol';\nimport './extensions/PausableERC20.sol';\nimport './extensions/WithWhiteListSupport.sol';\nimport './extensions/WithAllocation.sol';\nimport './extensions/WithStakingPool.sol';\n\ninterface IStartfiIDO {\n    function unstakeBatch(address[] memory users) external;\n}\n\ncontract AirdropedStartfiIDOWithStakingMigrated is\n    WithWhiteListSupport,\n    WithAllocation,\n    WithLimitedSupply,\n    WithStartTime,\n    PausableERC20,\n    WithStakingPool,\n    WithTokenPayment\n{\n    /**************************libraries ********** */\n\n    /***************************Declarations go here ********** */\n    IStartfiIDO _idoMigrated;\n    mapping(address => uint256) public migrateStaker;\n    mapping(address => bool) public isMigratedStaker;\n    event AirDropRequested(address beneficiary, uint256 amount, uint256 price);\n    event stakerMigrated(address beneficiary, uint256 amount);\n\n    // modifier\n    /******************************************* constructor goes here ********************************************************* */\n    constructor(\n        uint256 startTimeSale_,\n        uint256 mintPrice_,\n        uint256 maxSupply_,\n        uint256 lockDuration_,\n        address[] memory wallets_,\n        address _paymentToken,\n        address token_,\n        address owner_\n    )\n        WithLimitedSupply(maxSupply_)\n        WithTokenPayment(wallets_, _paymentToken, mintPrice_)\n        PausableERC20(owner_)\n        WithStartTime(startTimeSale_)\n        WithStakingPool(token_, lockDuration_)\n    {}\n\n    /******************************************* read state functions go here ********************************************************* */\n\n    /// @notice caller should pay the required price\n    /// @dev  called only when sale is started\n    /// @dev  called only when not paused\n    /// @dev  `allowance` can't zero\n    /// @dev must not xceed the cap\n    /// emit Transfer\n    function mint() external whenNotPaused isSaleStarted {\n        if (whilteListStatus()) {\n            require(isWhiteListed(_msgSender()), 'Must be white listed');\n        }\n        // get max amount user can buy\n        uint256 userTotalStakes = getReserves(_msgSender());\n        require(userTotalStakes > 0, 'No Participation with zero stakes');\n\n        uint256 totalPrice = _getAllowance(_msgSender());\n        require(totalPrice >= mintPrice(), 'Insufficient price value');\n        uint256 userTotalAllocation = _userAllocation[_msgSender()] + totalPrice;\n\n        uint256 _amount = (totalPrice * 1 ether) / mintPrice();\n\n        if (userTotalStakes <= _level1) {\n            require(userTotalAllocation <= _level1Max, 'allocation exceded');\n        } else if (userTotalStakes <= _level2) {\n            require(userTotalAllocation <= _level2Max, 'allocation exceded');\n        } else {\n            require(userTotalAllocation <= _level3Max, 'allocation exceded');\n        }\n        require(_amount <= availableTokenCount(), 'Insufficient contract balance');\n        require(_transferPayment(_msgSender(), totalPrice), 'Payment failed');\n        _increase(_amount);\n        _userAllocation[_msgSender()] = userTotalAllocation;\n        emit AirDropRequested(_msgSender(), _amount, totalPrice);\n    }\n\n    /// @notice Only owner can call it\n    /// @dev  `__startTimeURI` must be more than the current time\n    /// @param _startTime new _startTime\n    function updateSaleStartTime(uint256 _startTime) external onlyOwner isSaleNotStarted {\n        _setSaleStartTime(_startTime);\n    }\n\n    function updatelevelsAllocation(uint256 baseAllocation_) external onlyOwner whenPaused {\n        _updatelevelsAllocation(baseAllocation_);\n    }\n\n    function setMintPrice(uint256 price_) external onlyOwner whenPaused {\n        _setMintPrice(price_);\n    }\n\n    /**\n     * @dev Withdraw accumulated balance for `wallets`\n     *\n     */\n    function withdraw() external onlyOwner {\n        _withdraw();\n    }\n\n    function updateLockDuration(uint256 _duration) external onlyOwner whenPaused {\n        _updateLockDuration(_duration);\n    }\n\n    function toggleWhiteListStatus() external onlyOwner {\n        _toggleWhiteListStatus();\n    }\n\n    function setWhiteList(address[] memory _list) external onlyOwner {\n        _setWhiteList(_list);\n    }\n\n    function setMigratedIDO(address idoMigrated) external onlyOwner {\n        require(idoMigrated != address(0), 'Zero address is not allowed');\n        _idoMigrated = IStartfiIDO(idoMigrated);\n    }\n\n    // deposit\n    function deposit(uint256 amount) external whenNotPaused {\n        require(amount >= _level1, 'Amount is less the minumum');\n        _deposit(_msgSender(), amount);\n    }\n\n    // withdraw\n    function unstake(uint256 amount) external whenNotPaused {\n        // if from list , untake from the old contract\n        if (migrateStaker[_msgSender()] > 0 && !isMigratedStaker[_msgSender()]) {\n            address[] memory stakers = new address[](1);\n            stakers[0] = _msgSender();\n\n            _idoMigrated.unstakeBatch(stakers);\n            isMigratedStaker[_msgSender()] = true;\n        } else {\n            require(isUnLockedFund(_msgSender()), 'Fund is locked now');\n            _unstake(_msgSender(), amount);\n        }\n    }\n\n    function unstakeBatch(address[] memory users) external onlyOwner {\n        for (uint256 index = 0; index < users.length; index++) {\n            require(users[index] != address(0), 'Zero Address is not allowed');\n            _unstake(users[index], getReserves(users[index]));\n        }\n    }\n\n    function migrateStakers(address[] memory users, uint256[] memory amounts) external onlyOwner {\n        require(users.length == amounts.length);\n        for (uint256 index = 0; index < users.length; index++) {\n            require(users[index] != address(0), 'Zero Address is not allowed');\n            require(amounts[index] != 0, 'Zero Address is not allowed');\n            migrateStaker[users[index]] = amounts[index];\n            stakerTotalStakes[users[index]] += amounts[index];\n\n            emit stakerMigrated(users[index], amounts[index]);\n        }\n    }\n\n    function emergencyUnstake(address user, uint256 amount) external whenPaused {\n        _unstake(user, amount);\n    }\n}\n"
    },
    "contracts/extensions/WithAllocation.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity 0.8.4;\n\n/**\n \n *@title  StartFi WithAllocation\n * [ desc ] : contract to set allocation base and level for IDOs\n */\n\ncontract WithAllocation {\n    /******************************************* decalrations go here ********************************************************* */\n    uint256 private _baseAllocation = 250 * 1 ether;\n    uint256 internal _level1 = 2700 * 1 ether;\n    uint256 internal _level2 = 7000 * 1 ether;\n    uint256 internal _level3 = 14000 * 1 ether;\n    uint256 internal _level1Max = _baseAllocation;\n    uint256 internal _level2Max = _baseAllocation * 3;\n    uint256 internal _level3Max = _baseAllocation * 6;\n    mapping(address => uint256) internal _userAllocation;\n\n    function _updatelevelsAllocation(uint256 baseAllocation_) internal {\n        require(baseAllocation_ != 0, 'Zero value is not accepted');\n        _baseAllocation = baseAllocation_;\n    }\n\n    function baseAllocation() external view returns (uint256) {\n        return _baseAllocation;\n    }\n\n    function level1() external view returns (uint256, uint256) {\n        return (_level1, _level1Max);\n    }\n\n    function level2() external view returns (uint256, uint256) {\n        return (_level2, _level2Max);\n    }\n\n    function level3() external view returns (uint256, uint256) {\n        return (_level3, _level3Max);\n    }\n\n    function userAllocation(address user) external view returns (uint256) {\n        return _userAllocation[user];\n    }\n}\n"
    },
    "contracts/extensions/WithStakingPool.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity 0.8.4;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\n\n/**\n \n *@title  StartFi Stakes\n * [ desc ] : contract to hold users stakes\n *@notice : the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle\n */\n\ncontract WithStakingPool is ReentrancyGuard {\n    /******************************************* decalrations go here ********************************************************* */\n    uint256 private _lockDuration;\n    address private _stakingToken;\n\n    mapping(address => uint256) internal stakerTotalStakes;\n    mapping(address => uint256) stakerTimestamp;\n    /******************************************* modifiers go here ********************************************************* */\n\n    // events\n\n    event DepositFunds(address indexed diposter, uint256 amount);\n    event WithdrawFunds(address indexed diposter, uint256 amount);\n    event ChangeLockDuration(uint256 duration);\n\n    /******************************************* constructor goes here ********************************************************* */\n\n    constructor(address token_, uint256 lockDuration_) {\n        require(token_ != address(0) && lockDuration_ != 0, 'Zero values are not allowes');\n        _stakingToken = token_;\n        _lockDuration = lockDuration_;\n    }\n\n    /******************************************* read state functions go here ********************************************************* */\n\n    // deposit\n    function _deposit(address user, uint256 amount) internal {\n        require(IERC20(_stakingToken).allowance(user, address(this)) >= amount, 'Invalid amount');\n        IERC20(_stakingToken).transferFrom(user, address(this), amount);\n        stakerTotalStakes[user] += amount;\n        stakerTimestamp[user] = block.timestamp;\n        emit DepositFunds(user, amount);\n    }\n\n    function _safeTokenTransfer(address to, uint256 amount) private returns (bool) {\n        return IERC20(_stakingToken).transfer(to, amount);\n    }\n\n    // withdraw\n    function _unstake(address user, uint256 amount) internal nonReentrant {\n        // TODO:check marketplace user reserves\n        require(stakerTotalStakes[user] >= amount, 'Invalid amount');\n\n        stakerTotalStakes[user] -= amount;\n\n        _safeTokenTransfer(user, amount);\n\n        emit WithdrawFunds(user, amount);\n    }\n\n    function _updateLockDuration(uint256 _duration) internal {\n        require(_duration > 0, 'Lock time must not be less than zero');\n        _lockDuration = _duration;\n        emit ChangeLockDuration(_duration);\n    }\n\n    //getpoolinfo\n    function getReserves(address _owner) public view returns (uint256) {\n        return stakerTotalStakes[_owner];\n    }\n\n    function lockDuration() external view returns (uint256) {\n        return _lockDuration;\n    }\n\n    function stakingToken() external view returns (address) {\n        return _stakingToken;\n    }\n\n    function isUnLockedFund(address user) public view returns (bool) {\n        return stakerTimestamp[user] + _lockDuration <= block.timestamp;\n    }\n}\n"
    },
    "contracts/StartFiStakes.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity 0.8.4;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/security/Pausable.sol';\nimport '@openzeppelin/contracts/access/AccessControlEnumerable.sol';\n\n/**\n \n *@title  StartFi Stakes\n * [ desc ] : contract to hold users stakes\n *@notice : the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle\n */\n\ncontract StartFiStakes is Pausable, ReentrancyGuard, AccessControlEnumerable {\n    /******************************************* decalrations go here ********************************************************* */\n    uint256 private _lockDuration;\n    address private _stakingToken;\n    bytes32 public constant IDO_ROLE = keccak256('IDO_ROLE');\n    bytes32 public constant OWNER_ROLE = keccak256('OWNER_ROLE');\n\n    struct userPools {\n        uint256 amount;\n        uint256 registerBlock;\n        bool reservedToIDO;\n    }\n\n    mapping(address => uint256) stakerTotalStakes;\n    mapping(address => userPools[]) stakerPools;\n    /******************************************* modifiers go here ********************************************************* */\n    modifier onlyIDO() {\n        require(hasRole(IDO_ROLE, _msgSender()), 'caller is not IDO');\n\n        _;\n    }\n    modifier onlyOwner() {\n        require(hasRole(OWNER_ROLE, _msgSender()), 'caller is not the owner');\n\n        _;\n    }\n    // events\n\n    event DepositFunds(address indexed diposter, uint256 amount);\n    event WithdrawFunds(address indexed diposter, uint256 amount);\n    event ChangeLockDuration(uint256 duration);\n\n    /******************************************* constructor goes here ********************************************************* */\n\n    constructor(\n        address token_,\n        address _owner,\n        uint256 lockDuration_\n    ) {\n        require(token_ != address(0) && lockDuration_ != 0, 'Zero values are not allowes');\n        _stakingToken = token_;\n        _lockDuration = lockDuration_;\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\n\n        _setupRole(OWNER_ROLE, _owner);\n    }\n\n    /******************************************* read state functions go here ********************************************************* */\n\n    /**\n     * @dev Pauses contract.\n     *\n     *\n     *\n     * Requirements:\n     *\n     * - the caller must be the owner.\n     */\n    function pause() external virtual onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses contract.\n     *\n     *\n     *\n     * Requirements:\n     *\n     * - the caller must be the owner.\n     */\n    function unpause() external virtual onlyOwner whenPaused {\n        _unpause();\n    }\n\n    // deposit\n    function deposit(address user, uint256 amount) external whenNotPaused nonReentrant {\n        require(_getAllowance(_msgSender()) >= amount, 'Invalid amount');\n        IERC20(_stakingToken).transferFrom(_msgSender(), address(this), amount);\n        stakerPools[user].push(userPools(amount, block.timestamp, false));\n        stakerTotalStakes[user] += amount;\n        // stakerFree[user] += amount;\n        emit DepositFunds(user, amount);\n    }\n\n    function validateStakes(address user, uint256[] calldata proofIndexes)\n        external\n        onlyIDO\n        whenNotPaused\n        returns (uint256 reservAmount)\n    {\n        userPools[] storage _userPools = stakerPools[user];\n\n        for (uint256 index = 0; index < proofIndexes.length; index++) {\n            if (\n                _userPools[proofIndexes[index]].reservedToIDO == false &&\n                _userPools[proofIndexes[index]].amount > 0 &&\n                _userPools[proofIndexes[index]].registerBlock + _lockDuration <= block.timestamp\n            ) {\n                reservAmount += _userPools[proofIndexes[index]].amount;\n                _userPools[proofIndexes[index]].reservedToIDO = true;\n            }\n        }\n    }\n\n    function _safeTokenTransfer(address to, uint256 amount) private returns (bool) {\n        return IERC20(_stakingToken).transfer(to, amount);\n    }\n\n    // withdraw\n    function withdraw(uint256 amount, uint256[] calldata proofIndexes) external whenNotPaused nonReentrant {\n        // TODO:check marketplace user reserves\n        require(stakerTotalStakes[_msgSender()] >= amount, 'Invalid amount');\n        userPools[] storage _userPools = stakerPools[_msgSender()];\n        uint256 withdrawnAmount = amount;\n        for (uint256 index = 0; index < proofIndexes.length; index++) {\n            if (withdrawnAmount > 0) {\n                require(\n                    _userPools[proofIndexes[index]].amount > 0 &&\n                        _userPools[proofIndexes[index]].registerBlock + _lockDuration <= block.timestamp,\n                    'fund is locked or already released'\n                );\n\n                if (withdrawnAmount >= _userPools[proofIndexes[index]].amount) {\n                    _userPools[proofIndexes[index]].amount = 0;\n                    withdrawnAmount -= _userPools[proofIndexes[index]].amount;\n                } else {\n                    _userPools[proofIndexes[index]].amount -= withdrawnAmount;\n                    withdrawnAmount = 0;\n                }\n            }\n        }\n        _safeTokenTransfer(_msgSender(), amount);\n        stakerTotalStakes[_msgSender()] = stakerTotalStakes[_msgSender()] - amount;\n\n        emit WithdrawFunds(_msgSender(), amount);\n    }\n\n    function emergencyWithdraw(uint256[] calldata proofIndexes) external whenPaused nonReentrant {\n        // TODO:check marketplace user reserves\n        require(stakerTotalStakes[_msgSender()] >= 0, 'Invalid amount');\n        userPools[] storage _userPools = stakerPools[_msgSender()];\n        uint256 withdrawnAmount;\n        for (uint256 index = 0; index < proofIndexes.length; index++) {\n            withdrawnAmount += _userPools[proofIndexes[index]].amount;\n            _userPools[proofIndexes[index]].amount = 0;\n        }\n        _safeTokenTransfer(_msgSender(), withdrawnAmount);\n        stakerTotalStakes[_msgSender()] = stakerTotalStakes[_msgSender()] - withdrawnAmount;\n\n        emit WithdrawFunds(_msgSender(), withdrawnAmount);\n    }\n\n    function updateLockDuration(uint256 _duration) external onlyOwner whenPaused {\n        require(_duration > 1 days, 'Lock time must not be less than a day');\n        _lockDuration = _duration;\n        emit ChangeLockDuration(_duration);\n    }\n\n    //getpoolinfo\n    function getReserves(address _owner) external view returns (uint256) {\n        return stakerTotalStakes[_owner];\n    }\n\n    function getUserPoolLenght(address _user) external view returns (uint256) {\n        return stakerPools[_user].length;\n    }\n\n    function lockDuration() external view returns (uint256) {\n        return _lockDuration;\n    }\n\n    function stakingToken() external view returns (address) {\n        return _stakingToken;\n    }\n\n    function getUserPoolDetails(address _user, uint256 index)\n        external\n        view\n        returns (\n            uint256 amount,\n            bool unlocked,\n            bool reservedToIDO\n        )\n    {\n        amount = stakerPools[_user][index].amount;\n        unlocked = stakerPools[_user][index].registerBlock + _lockDuration <= block.timestamp;\n        reservedToIDO = stakerPools[_user][index].reservedToIDO;\n    }\n\n    function _getAllowance(address _owner) private view returns (uint256) {\n        return IERC20(_stakingToken).allowance(_owner, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {grantRole} to track enumerable memberships\n     */\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        super.grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {revokeRole} to track enumerable memberships\n     */\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        super.revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {renounceRole} to track enumerable memberships\n     */\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        super.renounceRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {_setupRole} to track enumerable memberships\n     */\n    function _setupRole(bytes32 role, address account) internal virtual override {\n        super._setupRole(role, account);\n        _roleMembers[role].add(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/AirdropedStartfiIDOWithStaking.sol": {
      "content": "pragma solidity 0.8.4;\n\n//SPDX-License-Identifier: AGPL-3.0-only\n/*\n        ,                                                                       \n  %%%%%%%%%%%%%%                                                      %%%%%%%   \n %%%           ./    %%                                %%%          %%%       %%\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\n  ,,,,,,,,,,,,,,                                                                */\n\nimport './extensions/WithLimitedSupply.sol';\nimport './extensions/WithTokenPayment.sol';\nimport './extensions/WithStartTime.sol';\nimport './extensions/PausableERC20.sol';\nimport './extensions/WithWhiteListSupport.sol';\nimport './extensions/WithAllocation.sol';\nimport './extensions/WithStakingPool.sol';\n\ncontract AirdropedStartfiIDOWithStaking is\n    WithWhiteListSupport,\n    WithAllocation,\n    WithLimitedSupply,\n    WithStartTime,\n    PausableERC20,\n    WithStakingPool,\n    WithTokenPayment\n{\n    /**************************libraries ********** */\n\n    /***************************Declarations go here ********** */\n    event AirDropRequested(address beneficiary, uint256 amount, uint256 price);\n\n    // modifier\n    /******************************************* constructor goes here ********************************************************* */\n    constructor(\n        uint256 startTimeSale_,\n        uint256 mintPrice_,\n        uint256 maxSupply_,\n        uint256 lockDuration_,\n        address[] memory wallets_,\n        address _paymentToken,\n        address token_,\n        address owner_\n    )\n        WithLimitedSupply(maxSupply_)\n        WithTokenPayment(wallets_, _paymentToken, mintPrice_)\n        PausableERC20(owner_)\n        WithStartTime(startTimeSale_)\n        WithStakingPool(token_, lockDuration_)\n    {}\n\n    /******************************************* read state functions go here ********************************************************* */\n\n    /// @notice caller should pay the required price\n    /// @dev  called only when sale is started\n    /// @dev  called only when not paused\n    /// @dev  `allowance` can't zero\n    /// @dev must not xceed the cap\n    /// emit Transfer\n    function mint() external whenNotPaused isSaleStarted {\n        if (whilteListStatus()) {\n            require(isWhiteListed(_msgSender()), 'Must be white listed');\n        }\n        // get max amount user can buy\n        uint256 userTotalStakes = getReserves(_msgSender());\n        require(userTotalStakes > 0, 'No Participation with zero stakes');\n\n        uint256 totalPrice = _getAllowance(_msgSender());\n        require(totalPrice >= mintPrice(), 'Insufficient price value');\n        uint256 userTotalAllocation = _userAllocation[_msgSender()] + totalPrice;\n\n        uint256 _amount = (totalPrice * 1 ether) / mintPrice();\n\n        if (userTotalStakes <= _level1) {\n            require(userTotalAllocation <= _level1Max, 'allocation exceded');\n        } else if (userTotalStakes <= _level2) {\n            require(userTotalAllocation <= _level2Max, 'allocation exceded');\n        } else {\n            require(userTotalAllocation <= _level3Max, 'allocation exceded');\n        }\n        require(_amount <= availableTokenCount(), 'Insufficient contract balance');\n        require(_transferPayment(_msgSender(), totalPrice), 'Payment failed');\n        _increase(_amount);\n        _userAllocation[_msgSender()] = userTotalAllocation;\n        emit AirDropRequested(_msgSender(), _amount, totalPrice);\n    }\n\n    /// @notice Only owner can call it\n    /// @dev  `__startTimeURI` must be more than the current time\n    /// @param _startTime new _startTime\n    function updateSaleStartTime(uint256 _startTime) external onlyOwner isSaleNotStarted {\n        _setSaleStartTime(_startTime);\n    }\n\n    function updatelevelsAllocation(uint256 baseAllocation_) external onlyOwner whenPaused {\n        _updatelevelsAllocation(baseAllocation_);\n    }\n\n    function setMintPrice(uint256 price_) external onlyOwner whenPaused {\n        _setMintPrice(price_);\n    }\n\n    /**\n     * @dev Withdraw accumulated balance for `wallets`\n     *\n     */\n    function withdraw() external onlyOwner {\n        _withdraw();\n    }\n\n    function updateLockDuration(uint256 _duration) external onlyOwner whenPaused {\n        _updateLockDuration(_duration);\n    }\n\n    function toggleWhiteListStatus() external onlyOwner {\n        _toggleWhiteListStatus();\n    }\n\n    function setWhiteList(address[] memory _list) external onlyOwner {\n        _setWhiteList(_list);\n    }\n\n    // deposit\n    function deposit(uint256 amount) external whenNotPaused {\n        require(amount >= _level1, 'Amount is less the minumum');\n        _deposit(_msgSender(), amount);\n    }\n\n    // withdraw\n    function unstake(uint256 amount) external whenNotPaused {\n        require(isUnLockedFund(_msgSender()), 'Fund is locked now');\n        _unstake(_msgSender(), amount);\n    }\n\n    function unstakeBatch(address[] memory users) external onlyOwner {\n        for (uint256 index = 0; index < users.length; index++) {\n            require(users[index] != address(0), 'Zero Address is not allowed');\n            _unstake(users[index], getReserves(users[index]));\n        }\n    }\n\n    function emergencyUnstake(address user, uint256 amount) external whenPaused {\n        _unstake(user, amount);\n    }\n}\n"
    },
    "contracts/test-supplements-contracts/AnyERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\nimport '@openzeppelin/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol';\n\ncontract AnyERC20 is ERC20PresetFixedSupply {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 initialSupply,\n        address owner\n    ) ERC20PresetFixedSupply(name, symbol, initialSupply, owner) {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../extensions/ERC20Burnable.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - Preminted initial supply\n *  - Ability for holders to burn (destroy) their tokens\n *  - No access control mechanism (for minting/pausing) and hence no governance\n *\n * This contract uses {ERC20Burnable} to include burn capabilities - head to\n * its documentation for details.\n *\n * _Available since v3.4._\n */\ncontract ERC20PresetFixedSupply is ERC20Burnable {\n    /**\n     * @dev Mints `initialSupply` amount of token and transfers them to `owner`.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 initialSupply,\n        address owner\n    ) ERC20(name, symbol) {\n        _mint(owner, initialSupply);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/extensions/WithEthPayment.sol": {
      "content": "pragma solidity 0.8.4;\n\n//SPDX-License-Identifier: AGPL-3.0-only\n/*\n        ,                                                                       \n  %%%%%%%%%%%%%%                                                      %%%%%%%   \n %%%           ./    %%                                %%%          %%%       %%\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\n  ,,,,,,,,,,,,,,                                                                */\n\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\n\n/// @title  WithEthPayment contract\n//\n/// @author startfi team\ncontract WithEthPayment is ReentrancyGuard {\n    /**************************libraries ********** */\n    using Address for address payable;\n    uint256 private _mintPrice;\n\n    /***************************Declarations go here ********** */\n    // stat var\n\n    address[] private _wallets;\n\n    // event\n    event UpdateMintPrice(uint256 newParice);\n    event Withdrawn(address payee, uint256 amount);\n\n    // modifier\n    /******************************************* constructor goes here ********************************************************* */\n    constructor(address[] memory wallets_, uint256 mintPrice_) {\n        _wallets = wallets_;\n        _mintPrice = mintPrice_;\n    }\n\n    /******************************************* read state functions go here ********************************************************* */\n\n    /******************************************* modify state functions go here ********************************************************* */\n\n    function mintPrice() public view returns (uint256) {\n        return _mintPrice;\n    }\n\n    function getWallets() external view returns (address[] memory) {\n        return _wallets;\n    }\n\n    /**\n     * @dev Withdraw accumulated balance for a wallet 1 and wallet 2, forwarding all gas to the\n     * recipient.\n     *\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n     * Make sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     *\n     */\n    function _withdraw() internal virtual nonReentrant {\n        uint256 share = address(this).balance / _wallets.length;\n        require(share > 0, \"Can't split zero shares\");\n        for (uint256 index = 0; index < _wallets.length; index++) {\n            emit Withdrawn(_wallets[index], share);\n            payable(_wallets[index]).sendValue(share);\n        }\n    }\n\n    function _setMintPrice(uint256 mintPrice_) internal {\n        require(mintPrice_ > 0, 'Zero value is not allowed');\n        _mintPrice = mintPrice_;\n        emit UpdateMintPrice(mintPrice_);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 300
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
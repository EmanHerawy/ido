{
  "address": "0xeB42C92B10dCa6c8bB08b578A7d7427A8A6E25A0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startTimeSale_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintPrice_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockDuration_",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "wallets_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "AirDropRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "ChangeLockDuration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "diposter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newParice",
          "type": "uint256"
        }
      ],
      "name": "UpdateMintPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPrice",
          "type": "uint256"
        }
      ],
      "name": "WhiteListPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "WhiteListUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "diposter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakerMigrated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "availableTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWallets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMigratedStaker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isUnLockedFund",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "isWhiteListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "level1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "level2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "level3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "migrateStaker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "migrateStakers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "name": "setMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_list",
          "type": "address[]"
        }
      ],
      "name": "setWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimeSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleWhiteListStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "name": "unstakeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "updateLockDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "updateSaleStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseAllocation_",
          "type": "uint256"
        }
      ],
      "name": "updatelevelsAllocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whilteListStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x528d2502ae057b0d8d5bc5d699595733d96c59614041f1f93cd0bc90925e0191",
  "receipt": {
    "to": null,
    "from": "0x3Df593fBF718917582fF35E40C874f3B0d1E86c6",
    "contractAddress": "0xeB42C92B10dCa6c8bB08b578A7d7427A8A6E25A0",
    "transactionIndex": 167,
    "gasUsed": "2608504",
    "logsBloom": "0x
    "blockHash": "0xf75e9cfbba804b1ae218bc31b5938326265ccdad186da78f7c4cb3b06c64d0fb",
    "transactionHash": "0x528d2502ae057b0d8d5bc5d699595733d96c59614041f1f93cd0bc90925e0191",
    "logs": [
      {
        "transactionIndex": 167,
        "blockNumber": 14506831,
        "transactionHash": "0x528d2502ae057b0d8d5bc5d699595733d96c59614041f1f93cd0bc90925e0191",
        "address": "0xeB42C92B10dCa6c8bB08b578A7d7427A8A6E25A0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003df593fbf718917582ff35e40c874f3b0d1e86c6"
        ],
        "data": "0x",
        "logIndex": 448,
        "blockHash": "0xf75e9cfbba804b1ae218bc31b5938326265ccdad186da78f7c4cb3b06c64d0fb"
      },
      {
        "transactionIndex": 167,
        "blockNumber": 14506831,
        "transactionHash": "0x528d2502ae057b0d8d5bc5d699595733d96c59614041f1f93cd0bc90925e0191",
        "address": "0xeB42C92B10dCa6c8bB08b578A7d7427A8A6E25A0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000003df593fbf718917582ff35e40c874f3b0d1e86c6",
          "0x0000000000000000000000003df593fbf718917582ff35e40c874f3b0d1e86c6"
        ],
        "data": "0x",
        "logIndex": 449,
        "blockHash": "0xf75e9cfbba804b1ae218bc31b5938326265ccdad186da78f7c4cb3b06c64d0fb"
      }
    ],
    "blockNumber": 14506831,
    "cumulativeGasUsed": "20993496",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1642542154,
    "5670000000000000",
    "50000000000000000000000",
    604800,
    [
      "0x3Df593fBF718917582fF35E40C874f3B0d1E86c6"
    ],
    "0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56",
    "0x04ae5cb48B8f968ED821972c5480b5B850f55554",
    "0x3Df593fBF718917582fF35E40C874f3B0d1E86c6"
  ],
  "solcInputHash": "20a6c5bf7030c9a28cb33ab008ee9d78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimeSale_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"wallets_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AirDropRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"ChangeLockDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"diposter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newParice\",\"type\":\"uint256\"}],\"name\":\"UpdateMintPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"}],\"name\":\"WhiteListPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"WhiteListUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"diposter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakerMigrated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWallets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMigratedStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUnLockedFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"level1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"level2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"level3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrateStaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"migrateStakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimeSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleWhiteListStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"unstakeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"updateLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"updateSaleStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAllocation_\",\"type\":\"uint256\"}],\"name\":\"updatelevelsAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whilteListStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"availableTokenCount()\":{\"details\":\"Check whether tokens are still available\",\"returns\":{\"_0\":\"the available token count\"}},\"maxSupply()\":{\"details\":\"Get the max Supply\",\"returns\":{\"_0\":\"the maximum token count\"}},\"mint(uint256)\":{\"details\":\"called only when sale is startedcalled only when not paused`_amount` can't zeromust not xceed the cap\",\"params\":{\"_amount\":\"number of token to be minted emit Transfer\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses all token transfers. See {ERC721Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"tokenCount()\":{\"details\":\"Get the current token count\",\"returns\":{\"_0\":\"the created token count\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses all token transfers. See {ERC721Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"updateSaleStartTime(uint256)\":{\"details\":\"`__startTimeURI` must be more than the current time\",\"params\":{\"_startTime\":\"new _startTime\"}},\"withdraw()\":{\"details\":\"Withdraw accumulated balance for `wallets`\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mint(uint256)\":{\"notice\":\"caller should pay the required price\"},\"updateSaleStartTime(uint256)\":{\"notice\":\"Only owner can call it\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AirdropedStartfiIDOWithStaking.sol\":\"AirdropedStartfiIDOWithStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xa681e276ffa5896274bd7fbb01a1258190d7b72215208606db00d44aa4890811\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0xc1b966eb28b972bae1d366d8ef0b3133eea869cfc65b8b4c90c389fcd67a8085\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/AirdropedStartfiIDOWithStaking.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\n//SPDX-License-Identifier: AGPL-3.0-only\\n/*\\n        ,                                                                       \\n  %%%%%%%%%%%%%%                                                      %%%%%%%   \\n %%%           ./    %%                                %%%          %%%       %%\\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \\n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\\n  ,,,,,,,,,,,,,,                                                                */\\n\\nimport './extensions/WithLimitedSupply.sol';\\nimport './extensions/WithTokenPayment.sol';\\nimport './extensions/WithStartTime.sol';\\nimport './extensions/PausableERC20.sol';\\nimport './extensions/WithWhiteListSupport.sol';\\nimport './extensions/WithAllocation.sol';\\nimport './extensions/WithStakingPool.sol';\\n\\ninterface IStartfiIDO {\\n    function unstakeBatch(address[] memory users) external;\\n}\\n\\ncontract AirdropedStartfiIDOWithStaking is\\n    WithWhiteListSupport,\\n    WithAllocation,\\n    WithLimitedSupply,\\n    WithStartTime,\\n    PausableERC20,\\n    WithStakingPool,\\n    WithTokenPayment\\n{\\n    /**************************libraries ********** */\\n\\n    /***************************Declarations go here ********** */\\n\\n    mapping(address => uint256) public migrateStaker;\\n    mapping(address => bool) public isMigratedStaker;\\n    event AirDropRequested(address beneficiary, uint256 amount, uint256 price);\\n    event stakerMigrated(address beneficiary, uint256 amount);\\n\\n    // modifier\\n    /******************************************* constructor goes here ********************************************************* */\\n    constructor(\\n        uint256 startTimeSale_,\\n        uint256 mintPrice_,\\n        uint256 maxSupply_,\\n        uint256 lockDuration_,\\n        address[] memory wallets_,\\n        address _paymentToken,\\n        address token_,\\n        address owner_\\n    )\\n        WithLimitedSupply(maxSupply_)\\n        WithTokenPayment(wallets_, _paymentToken, mintPrice_)\\n        PausableERC20(owner_)\\n        WithStartTime(startTimeSale_)\\n        WithStakingPool(token_, lockDuration_)\\n    {}\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n\\n    /// @notice caller should pay the required price\\n    /// @dev  called only when sale is started\\n    /// @dev  called only when not paused\\n    /// @dev  `_amount` can't zero\\n    /// @dev must not xceed the cap\\n    /// @param _amount number of token to be minted\\n    /// emit Transfer\\n    function mint(uint256 _amount) external whenNotPaused isSaleStarted isWithinCapLimit(_amount) {\\n        if (whilteListStatus()) {\\n            require(isWhiteListed(_msgSender()), 'Must be white listed');\\n        }\\n        // get max amount user can buy\\n        require(_amount > 0, 'invalid_amount');\\n        uint256 tokenAmount;\\n        uint256 userTotalAllocation = _userAllocation[_msgSender()] + _amount;\\n\\n        uint256 totalStakesForGivenIndexes = getReserves(_msgSender());\\n\\n        require(totalStakesForGivenIndexes > 0, 'No Participation with zero stakes');\\n        // require(isUnLockedFund(_msgSender()), 'Please wait for lock time end');\\n\\n        if (totalStakesForGivenIndexes <= _level1) {\\n            tokenAmount = userTotalAllocation > _level1Max ? _level1Max - _userAllocation[_msgSender()] : _amount;\\n        } else if (totalStakesForGivenIndexes <= _level2) {\\n            tokenAmount = userTotalAllocation > _level2Max ? _level2Max - _userAllocation[_msgSender()] : _amount;\\n        } else {\\n            tokenAmount = userTotalAllocation > _level3Max ? _level3Max - _userAllocation[_msgSender()] : _amount;\\n        }\\n        uint256 _price = (tokenAmount * mintPrice()) / 1 ether;\\n        require(tokenAmount <= availableTokenCount(), 'Insufficient contract balance');\\n        require(_price <= _getAllowance(_msgSender()), 'Insufficient price value');\\n        require(_transferPayment(_msgSender(), _price), 'Payment failed');\\n        _increase(tokenAmount);\\n        _userAllocation[_msgSender()] += tokenAmount;\\n        emit AirDropRequested(_msgSender(), tokenAmount, _price);\\n    }\\n\\n    /// @notice Only owner can call it\\n    /// @dev  `__startTimeURI` must be more than the current time\\n    /// @param _startTime new _startTime\\n    function updateSaleStartTime(uint256 _startTime) external onlyOwner isSaleNotStarted {\\n        _setSaleStartTime(_startTime);\\n    }\\n\\n    function updatelevelsAllocation(uint256 baseAllocation_) external onlyOwner whenPaused {\\n        _updatelevelsAllocation(baseAllocation_);\\n    }\\n\\n    function setMintPrice(uint256 price_) external onlyOwner whenPaused {\\n        _setMintPrice(price_);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for `wallets`\\n     *\\n     */\\n    function withdraw() external onlyOwner {\\n        _withdraw();\\n    }\\n\\n    function updateLockDuration(uint256 _duration) external onlyOwner whenPaused {\\n        _updateLockDuration(_duration);\\n    }\\n\\n    function toggleWhiteListStatus() external onlyOwner {\\n        _toggleWhiteListStatus();\\n    }\\n\\n    function setWhiteList(address[] memory _list) external onlyOwner {\\n        _setWhiteList(_list);\\n    }\\n\\n    // deposit\\n    function deposit(uint256 amount) external whenNotPaused {\\n        require(amount >= _level1, 'Amount is less the minumum');\\n        _deposit(_msgSender(), amount);\\n    }\\n\\n    // withdraw\\n    function unstake(uint256 amount) external whenNotPaused {\\n        // if from list , untake from the old contract\\n        if (migrateStaker[_msgSender()] > 0 && !isMigratedStaker[_msgSender()]) {\\n            address[] memory stakers = new address[](1);\\n            stakers[0] = _msgSender();\\n\\n            IStartfiIDO(0x65280fcb62f1b2BEe93b08Ce7f66ae899B2E4895).unstakeBatch(stakers);\\n            isMigratedStaker[_msgSender()] = true;\\n        } else {\\n            require(isUnLockedFund(_msgSender()), 'Fund is locked now');\\n            _unstake(_msgSender(), amount);\\n        }\\n    }\\n\\n    function unstakeBatch(address[] memory users) external onlyOwner {\\n        for (uint256 index = 0; index < users.length; index++) {\\n            require(users[index] != address(0), 'Zero Address is not allowed');\\n            _unstake(users[index], getReserves(users[index]));\\n        }\\n    }\\n\\n    function migrateStakers(address[] memory users, uint256[] memory amounts) external onlyOwner {\\n        require(users.length == amounts.length);\\n        for (uint256 index = 0; index < users.length; index++) {\\n            require(users[index] != address(0), 'Zero Address is not allowed');\\n            require(amounts[index] != 0, 'Zero Address is not allowed');\\n            migrateStaker[users[index]] = amounts[index];\\n            stakerTotalStakes[users[index]] += amounts[index];\\n\\n            emit stakerMigrated(users[index], amounts[index]);\\n        }\\n    }\\n\\n    function emergencyUnstake(uint256 amount) external whenPaused {\\n        _unstake(_msgSender(), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x1d5beb75df63aeb74c790f0b34a1a2562c7c94d25c9ed88116566debdb13b3f1\",\"license\":\"AGPL-3.0-only\"},\"contracts/extensions/PausableERC20.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\n//SPDX-License-Identifier: AGPL-3.0-only\\n/*\\n        ,                                                                       \\n  %%%%%%%%%%%%%%                                                      %%%%%%%   \\n %%%           ./    %%                                %%%          %%%       %%\\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \\n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\\n  ,,,,,,,,,,,,,,                                                                */\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\n\\n/// @title  AnyERC20 With Eth contract\\n//\\n/// @author startfi team\\nabstract contract PausableERC20 is Pausable, Ownable {\\n    /**************************libraries ********** */\\n\\n    /***************************Declarations go here ********** */\\n    // stat var\\n\\n    // tokenID => timestamp\\n\\n    // event\\n\\n    // modifier\\n    /******************************************* constructor goes here ********************************************************* */\\n    constructor(address owner_) {\\n        transferOwnership(owner_);\\n    }\\n\\n    /******************************************* modify state functions go here ********************************************************* */\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() external virtual onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() external virtual onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x23bcaee42569f42d14bedeac134e26902eaf732d353caca50222b6af0cdd70cc\",\"license\":\"AGPL-3.0-only\"},\"contracts/extensions/WithAllocation.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.4;\\n\\n/**\\n \\n *@title  StartFi WithAllocation\\n * [ desc ] : contract to set allocation base and level for IDOs\\n */\\n\\ncontract WithAllocation {\\n    /******************************************* decalrations go here ********************************************************* */\\n    uint256 private _baseAllocation = 6944 * 1 ether;\\n    uint256 internal _level1 = 2700 * 1 ether;\\n    uint256 internal _level2 = 7000 * 1 ether;\\n    uint256 internal _level3 = 14000 * 1 ether;\\n    uint256 internal _level1Max = _baseAllocation;\\n    uint256 internal _level2Max = _baseAllocation * 3;\\n    uint256 internal _level3Max = _baseAllocation * 6;\\n    mapping(address => uint256) internal _userAllocation;\\n\\n    function _updatelevelsAllocation(uint256 baseAllocation_) internal {\\n        require(baseAllocation_ != 0, 'Zero value is not accepted');\\n        _baseAllocation = baseAllocation_;\\n    }\\n\\n    function baseAllocation() external view returns (uint256) {\\n        return _baseAllocation;\\n    }\\n\\n    function level1() external view returns (uint256, uint256) {\\n        return (_level1, _level1Max);\\n    }\\n\\n    function level2() external view returns (uint256, uint256) {\\n        return (_level2, _level2Max);\\n    }\\n\\n    function level3() external view returns (uint256, uint256) {\\n        return (_level3, _level3Max);\\n    }\\n\\n    function userAllocation(address user) external view returns (uint256) {\\n        return _userAllocation[user];\\n    }\\n}\\n\",\"keccak256\":\"0x129a3a2f9a27abdcfe126e047337c1d18378dd3c77af11fc83a5bcfb069bc63d\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/extensions/WithLimitedSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\n\\n/// @author 1001.digital - edit mhjey - edit\\n/// @title A token tracker that limits the token supply and increments token IDs on each new mint.\\nabstract contract WithLimitedSupply {\\n    using Counters for Counters.Counter;\\n\\n    // Keeps track of how many we have minted\\n    uint256 private _tokenCount;\\n\\n    /// @dev The maximum count of tokens this token tracker will hold.\\n    uint256 private immutable _maxSupply;\\n\\n    modifier isWithinCapLimit(uint256 tokenAmount) virtual {\\n        require((_tokenCount + tokenAmount) <= _maxSupply, 'Purchase exceeds max supply');\\n        _;\\n    }\\n    /// @dev Check whether another token is still available\\n    modifier ensureAvailability() {\\n        require(availableTokenCount() > 0, 'No more tokens available');\\n        _;\\n    }\\n\\n    /// @param amount Check whether number of tokens are still available\\n    /// @dev Check whether tokens are still available\\n    modifier ensureAvailabilityFor(uint256 amount) {\\n        require(availableTokenCount() >= amount, 'Requested number of tokens not available');\\n        _;\\n    }\\n\\n    /// Instanciate the contract\\n    /// @param totalSupply_ how many tokens this collection should hold\\n    constructor(uint256 totalSupply_) {\\n        _maxSupply = totalSupply_;\\n    }\\n\\n    /// @dev Get the max Supply\\n    /// @return the maximum token count\\n    function maxSupply() public view returns (uint256) {\\n        return _maxSupply;\\n    }\\n\\n    /// @dev Get the current token count\\n    /// @return the created token count\\n    function tokenCount() public view returns (uint256) {\\n        return _tokenCount;\\n    }\\n\\n    /// @dev Check whether tokens are still available\\n    /// @return the available token count\\n    function availableTokenCount() public view returns (uint256) {\\n        return maxSupply() - tokenCount();\\n    }\\n\\n    /// @dev Increment the token count and fetch the latest count\\n    /// @return the next token id\\n    function _increase(uint256 amount) internal virtual ensureAvailabilityFor(amount) returns (uint256) {\\n        _tokenCount += amount;\\n\\n        return _tokenCount;\\n    }\\n}\\n\",\"keccak256\":\"0xd1b7007f5c5b7eb72ecc936aafe8fcf112dfc9bd36e71b00316718c956a32e27\",\"license\":\"MIT\"},\"contracts/extensions/WithStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\n/**\\n \\n *@title  StartFi Stakes\\n * [ desc ] : contract to hold users stakes\\n *@notice : the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle\\n */\\n\\ncontract WithStakingPool is ReentrancyGuard {\\n    /******************************************* decalrations go here ********************************************************* */\\n    uint256 private _lockDuration;\\n    address private _stakingToken;\\n\\n    mapping(address => uint256) internal stakerTotalStakes;\\n    mapping(address => uint256) stakerTimestamp;\\n    /******************************************* modifiers go here ********************************************************* */\\n\\n    // events\\n\\n    event DepositFunds(address indexed diposter, uint256 amount);\\n    event WithdrawFunds(address indexed diposter, uint256 amount);\\n    event ChangeLockDuration(uint256 duration);\\n\\n    /******************************************* constructor goes here ********************************************************* */\\n\\n    constructor(address token_, uint256 lockDuration_) {\\n        require(token_ != address(0) && lockDuration_ != 0, 'Zero values are not allowes');\\n        _stakingToken = token_;\\n        _lockDuration = lockDuration_;\\n    }\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n\\n    // deposit\\n    function _deposit(address user, uint256 amount) internal {\\n        require(IERC20(_stakingToken).allowance(user, address(this)) >= amount, 'Invalid amount');\\n        IERC20(_stakingToken).transferFrom(user, address(this), amount);\\n        stakerTotalStakes[user] += amount;\\n        stakerTimestamp[user] = block.timestamp;\\n        emit DepositFunds(user, amount);\\n    }\\n\\n    function _safeTokenTransfer(address to, uint256 amount) private returns (bool) {\\n        return IERC20(_stakingToken).transfer(to, amount);\\n    }\\n\\n    // withdraw\\n    function _unstake(address user, uint256 amount) internal nonReentrant {\\n        // TODO:check marketplace user reserves\\n        require(stakerTotalStakes[user] >= amount, 'Invalid amount');\\n\\n        stakerTotalStakes[user] -= amount;\\n\\n        _safeTokenTransfer(user, amount);\\n\\n        emit WithdrawFunds(user, amount);\\n    }\\n\\n    function _updateLockDuration(uint256 _duration) internal {\\n        require(_duration >0, 'Lock time must not be less than zero');\\n        _lockDuration = _duration;\\n        emit ChangeLockDuration(_duration);\\n    }\\n\\n    //getpoolinfo\\n    function getReserves(address _owner) public view returns (uint256) {\\n        return stakerTotalStakes[_owner];\\n    }\\n\\n    function lockDuration() external view returns (uint256) {\\n        return _lockDuration;\\n    }\\n\\n    function stakingToken() external view returns (address) {\\n        return _stakingToken;\\n    }\\n\\n    function isUnLockedFund(address user) public view returns (bool) {\\n        return stakerTimestamp[user] + _lockDuration <= block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xcb42d8074f723b9fa8f703cdd45d1887b5639f125684c2105c127f7d6aa23f05\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/extensions/WithStartTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title mange start time for sale\\nabstract contract WithStartTime {\\n    uint256 private _startTimeSale;\\n\\n    constructor(uint256 startTime_) {\\n        _startTimeSale = startTime_;\\n    }\\n\\n    modifier isSaleStarted() {\\n        require(_startTimeSale <= block.timestamp && _startTimeSale != 0, 'Sale did not start yet');\\n\\n        _;\\n    }\\n    modifier isSaleNotStarted() {\\n        require(_startTimeSale > block.timestamp || _startTimeSale == 0, 'Sale has started');\\n\\n        _;\\n    }\\n\\n    /// @notice Only woner can call it\\n    /// @dev  `__startTimeURI` must be more than the current time\\n    /// @param _startTime new _startTime\\n    function _setSaleStartTime(uint256 _startTime) internal {\\n        require(_startTime > block.timestamp, 'Can not set time back');\\n        _startTimeSale = _startTime;\\n    }\\n\\n    function startTimeSale() external view returns (uint256) {\\n        return _startTimeSale;\\n    }\\n}\\n\",\"keccak256\":\"0xdd4a1e86db4e5b3fb7def67c38c29f97dd794fb83272b2cade5e6916742ae8fa\",\"license\":\"MIT\"},\"contracts/extensions/WithTokenPayment.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\n//SPDX-License-Identifier: AGPL-3.0-only\\n/*\\n        ,                                                                       \\n  %%%%%%%%%%%%%%                                                      %%%%%%%   \\n %%%           ./    %%                                %%%          %%%       %%\\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \\n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\\n  ,,,,,,,,,,,,,,                                                                */\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\n\\n/// @title  WithTokenPayment contract\\n//\\ncontract WithTokenPayment is ReentrancyGuard {\\n    /**************************libraries ********** */\\n\\n    /***************************Declarations go here ********** */\\n    // stat var\\n    uint256 private _mintPrice;\\n\\n    IERC20 private immutable _erc20Token;\\n    address[] private _wallets;\\n\\n    // event\\n    event UpdateMintPrice(uint256 newParice);\\n    event Withdrawn(address payee, uint256 amount);\\n\\n    // modifier\\n\\n    /******************************************* constructor goes here ********************************************************* */\\n    constructor(\\n        address[] memory wallets_,\\n        address token_,\\n        uint256 mintPrice_\\n    ) {\\n        _wallets = wallets_;\\n        _mintPrice = mintPrice_;\\n\\n        _erc20Token = IERC20(token_);\\n    }\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n\\n    /******************************************* modify state functions go here ********************************************************* */\\n    function _getAllowance(address owner) internal view returns (uint256) {\\n        return _erc20Token.allowance(owner, address(this));\\n    }\\n\\n    function mintPrice() public view returns (uint256) {\\n        return _mintPrice;\\n    }\\n\\n    function _transferPayment(address sender, uint256 amount) internal nonReentrant returns (bool) {\\n        return _erc20Token.transferFrom(sender, address(this), amount);\\n    }\\n\\n    function getWallets() external view returns (address[] memory) {\\n        return _wallets;\\n    }\\n\\n    function getBalanceOf(address user) internal view returns (uint256) {\\n        return _erc20Token.balanceOf(user);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a wallet 1 and wallet 2, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     */\\n    function _withdraw() internal virtual nonReentrant {\\n        uint256 share = _erc20Token.balanceOf(address(this)) / _wallets.length;\\n        require(share > 0, \\\"Can't split zero shares\\\");\\n        for (uint256 index = 0; index < _wallets.length; index++) {\\n            emit Withdrawn(_wallets[index], share);\\n\\n            require(_erc20Token.transfer(_wallets[index], share), \\\"Couldn't transfer token\\\");\\n        }\\n    }\\n\\n    function _setMintPrice(uint256 mintPrice_) internal {\\n        require(mintPrice_ > 0, 'Zero value is not allowed');\\n        _mintPrice = mintPrice_;\\n        emit UpdateMintPrice(mintPrice_);\\n    }\\n}\\n\",\"keccak256\":\"0x164c832a5e78f7a44d293e81190227bd3a6079aa49b7ce6d58bd3aab9205934a\",\"license\":\"AGPL-3.0-only\"},\"contracts/extensions/WithWhiteListSupport.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\nimport '@openzeppelin/contracts/utils/structs/EnumerableMap.sol';\\n\\nabstract contract WithWhiteListSupport {\\n    // Add the library methods\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    bool private _whiteListEnabled = true;\\n    // Declare a set state variable\\n    EnumerableSet.AddressSet private _whiteList;\\n    event WhiteListPriceUpdated(uint256 newPrice, uint256 oldPrice);\\n    event WhiteListUpdated(address beneficiary);\\n\\n    /// @dev to be override by the child contract to add access control modifier\\n    function _toggleWhiteListStatus() internal virtual {\\n        _whiteListEnabled = !_whiteListEnabled;\\n    }\\n\\n    /// @dev to be override by the child contract to add access control modifier\\n    function _setWhiteList(address[] memory _list) internal virtual {\\n        // require(whiteList.length()==0,\\\"Already initialzed\\\");\\n        // require(_list.length > 0, 'Empty list is not allowed');\\n        for (uint256 index = 0; index < _list.length; index++) {\\n            require(_list[index] != address(0), 'empty address is not allowed');\\n            require(!_whiteList.contains(_list[index]), 'duplicated address is not allowed');\\n            require(_whiteList.add(_list[index]));\\n            emit WhiteListUpdated(_list[index]);\\n        }\\n    }\\n\\n    function isWhiteListed(address _beneficiary) public view returns (bool) {\\n        return _whiteList.contains(_beneficiary);\\n    }\\n\\n    function whilteListStatus() public view returns (bool) {\\n        return _whiteListEnabled;\\n    }\\n}\\n\",\"keccak256\":\"0x468b3c46cd97ecc5cfd031f2c931e2f36fecb6ab6ef951e91168d94291b94599\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526000805460ff191660011790556901786f5bc91c78800000600381815568925e06eec972b0000060045569017b7883c069166000006005556902f6f10780d22cc0000060065560078290556200005b9190620004ab565b6008556003546200006e906006620004ab565b6009553480156200007e57600080fd5b5060405162002d0e38038062002d0e833981016040819052620000a1916200036d565b6080869052600c889055600d805460ff19169055838388848885620000c6336200019e565b620000d181620001f8565b506001600e556001600160a01b03821615801590620000ef57508015155b620001415760405162461bcd60e51b815260206004820152601b60248201527f5a65726f2076616c75657320617265206e6f7420616c6c6f776573000000000060448201526064015b60405180910390fd5b601080546001600160a01b0319166001600160a01b039390931692909217909155600f5582516200017a906014906020860190620002cf565b5060135560601b6001600160601b03191660a05250620004ed975050505050505050565b600d80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600d546001600160a01b036101009091041633146200025a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000138565b6001600160a01b038116620002c15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000138565b620002cc816200019e565b50565b82805482825590600052602060002090810192821562000327579160200282015b828111156200032757825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620002f0565b506200033592915062000339565b5090565b5b808211156200033557600081556001016200033a565b80516001600160a01b03811681146200036857600080fd5b919050565b600080600080600080600080610100898b0312156200038a578384fd5b885160208a015160408b015160608c015160808d0151939b50919950975095506001600160401b0380821115620003bf578586fd5b818b0191508b601f830112620003d3578586fd5b815181811115620003e857620003e8620004d7565b8060051b604051601f19603f83011681018181108582111715620004105762000410620004d7565b8060405250809350828152602081019350602085018f60208488010111156200043757898afd5b8995505b8386101562000465576200044f8162000350565b855260019590950194602094850194016200043b565b5080985050505050506200047c60a08a0162000350565b92506200048c60c08a0162000350565b91506200049c60e08a0162000350565b90509295985092959890939650565b6000816000190483118215151615620004d257634e487b7160e01b81526011600452602481fd5b500290565b634e487b7160e01b600052604160045260246000fd5b60805160a05160601c6127d56200053960003960008181611788015281816118e401528181611dd20152611ed401526000818161046101528181610b50015261114101526127d56000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c80638da7878c11610130578063c4bfce18116100b8578063ee19f29a1161007c578063ee19f29a146104a2578063f2fde38b146104c5578063f4a0a528146104d8578063fa4d2c67146104eb578063fe7dbca6146104f657600080fd5b8063c4bfce1814610444578063d477edf41461044c578063d5abeb011461045f578063db7a460514610485578063e14ca3531461049a57600080fd5b8063a0712d68116100ff578063a0712d68146103f5578063b6b55f2514610408578063bc3377d91461041b578063beafca6514610426578063c380d9801461043957600080fd5b80638da7878c146103bf5780639d1c0e4a146103c75780639f181b5e146103da578063a0378aec146103e257600080fd5b80635c975abb116101be578063715018a611610182578063715018a61461036157806372f702f314610369578063775b9c131461038e5780638456cb59146103a15780638da5cb5b146103a957600080fd5b80635c975abb1461030757806360f609e41461031e57806364954df81461033e5780636817c76c146103465780636f9170f61461034e57600080fd5b80632e17de78116102055780632e17de781461029f5780633ccfd60b146102b25780633e99c1e4146102ba5780633f4ba83a146102e357806349bb330f146102eb57600080fd5b8063012ce50114610237578063045544431461024c5780631a0cb3a714610263578063295e4edf1461028c575b600080fd5b61024a6102453660046125e3565b610509565b005b600f545b6040519081526020015b60405180910390f35b6102506102713660046124b2565b6001600160a01b03166000908152600a602052604090205490565b61024a61029a3660046125e3565b610564565b61024a6102ad3660046125e3565b6105ec565b61024a6107ad565b6102506102c83660046124b2565b6001600160a01b031660009081526011602052604090205490565b61024a6107e7565b6004546007545b6040805192835260208301919091520161025a565b600d5460ff165b604051901515815260200161025a565b61025061032c3660046124b2565b60156020526000908152604090205481565b61024a61081f565b601354610250565b61030e61035c3660046124b2565b610866565b61024a610879565b6010546001600160a01b03165b6040516001600160a01b03909116815260200161025a565b61024a61039c3660046124cc565b6108b3565b61024a6108ec565b600d5461010090046001600160a01b0316610376565b600c54610250565b61030e6103d53660046124b2565b610924565b600b54610250565b61024a6103f03660046124cc565b610956565b61024a6104033660046125e3565b610aa8565b61024a6104163660046125e3565b610f28565b6005546008546102f2565b61024a6104343660046125e3565b610fca565b6006546009546102f2565b600354610250565b61024a61045a3660046125e3565b61104c565b7f0000000000000000000000000000000000000000000000000000000000000000610250565b61048d6110ce565b60405161025a9190612613565b610250611130565b61030e6104b03660046124b2565b60166020526000908152604090205460ff1681565b61024a6104d33660046124b2565b61116a565b61024a6104e63660046125e3565b611208565b60005460ff1661030e565b61024a610504366004612507565b61128a565b600d5460ff166105575760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064015b60405180910390fd5b610561338261158a565b50565b600d546001600160a01b036101009091041633146105945760405162461bcd60e51b815260040161054e90612660565b42600c5411806105a45750600c54155b6105e35760405162461bcd60e51b815260206004820152601060248201526f14d85b19481a185cc81cdd185c9d195960821b604482015260640161054e565b610561816116c0565b600d5460ff16156106325760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161054e565b336000908152601560205260409020541580159061066057503360009081526016602052604090205460ff16155b15610763576040805160018082528183019092526000916020808301908036833701905050905033816000815181106106a957634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015260405163280de2bb60e21b81527365280fcb62f1b2bee93b08ce7f66ae899b2e48959063a0378aec906106f8908490600401612613565b600060405180830381600087803b15801561071257600080fd5b505af1158015610726573d6000803e3d6000fd5b505050506001601660006107373390565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790555050565b61076c33610924565b6105575760405162461bcd60e51b815260206004820152601260248201527146756e64206973206c6f636b6564206e6f7760701b604482015260640161054e565b600d546001600160a01b036101009091041633146107dd5760405162461bcd60e51b815260040161054e90612660565b6107e5611714565b565b600d546001600160a01b036101009091041633146108175760405162461bcd60e51b815260040161054e90612660565b6107e5611a25565b600d546001600160a01b0361010090910416331461084f5760405162461bcd60e51b815260040161054e90612660565b6107e56000805460ff19811660ff90911615179055565b6000610873600183611ab8565b92915050565b600d546001600160a01b036101009091041633146108a95760405162461bcd60e51b815260040161054e90612660565b6107e56000611add565b600d546001600160a01b036101009091041633146108e35760405162461bcd60e51b815260040161054e90612660565b61056181611b44565b600d546001600160a01b0361010090910416331461091c5760405162461bcd60e51b815260040161054e90612660565b6107e5611d2f565b600f546001600160a01b0382166000908152601260205260408120549091429161094e91906126ea565b111592915050565b600d546001600160a01b036101009091041633146109865760405162461bcd60e51b815260040161054e90612660565b60005b8151811015610aa45760006001600160a01b03168282815181106109bd57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415610a1c5760405162461bcd60e51b815260206004820152601b60248201527f5a65726f2041646472657373206973206e6f7420616c6c6f7765640000000000604482015260640161054e565b610a92828281518110610a3f57634e487b7160e01b600052603260045260246000fd5b6020026020010151610a8d848481518110610a6a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031660009081526011602052604090205490565b61158a565b80610a9c81612758565b915050610989565b5050565b600d5460ff1615610aee5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161054e565b42600c5411158015610b015750600c5415155b610b4d5760405162461bcd60e51b815260206004820152601660248201527f53616c6520646964206e6f742073746172742079657400000000000000000000604482015260640161054e565b807f000000000000000000000000000000000000000000000000000000000000000081600b54610b7d91906126ea565b1115610bcb5760405162461bcd60e51b815260206004820152601b60248201527f50757263686173652065786365656473206d617820737570706c790000000000604482015260640161054e565b60005460ff1615610c2b57610bdf33610866565b610c2b5760405162461bcd60e51b815260206004820152601460248201527f4d757374206265207768697465206c6973746564000000000000000000000000604482015260640161054e565b60008211610c6c5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5917d85b5bdd5b9d60921b604482015260640161054e565b336000908152600a60205260408120548190610c899085906126ea565b90506000610c96336102c8565b905060008111610cf25760405162461bcd60e51b815260206004820152602160248201527f4e6f2050617274696369706174696f6e2077697468207a65726f207374616b656044820152607360f81b606482015260840161054e565b6004548111610d2e576007548211610d0a5784610d27565b336000908152600a6020526040902054600754610d279190612741565b9250610d92565b6005548111610d63576008548211610d465784610d27565b336000908152600a6020526040902054600854610d279190612741565b6009548211610d725784610d8f565b336000908152600a6020526040902054600954610d8f9190612741565b92505b6000670de0b6b3a7640000610da660135490565b610db09086612722565b610dba9190612702565b9050610dc4611130565b841115610e135760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e6365000000604482015260640161054e565b610e1c33611daa565b811115610e6b5760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e742070726963652076616c75650000000000000000604482015260640161054e565b610e753382611e4e565b610eb25760405162461bcd60e51b815260206004820152600e60248201526d14185e5b595b9d0819985a5b195960921b604482015260640161054e565b610ebb84611f5c565b50336000908152600a602052604081208054869290610edb9084906126ea565b9091555050604080513381526020810186905280820183905290517f430da7b4ea1a68abe9b6f9b621aa90a53090bb079c516d1bf6402c51a48b800b9181900360600190a1505050505050565b600d5460ff1615610f6e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161054e565b600454811015610fc05760405162461bcd60e51b815260206004820152601a60248201527f416d6f756e74206973206c65737320746865206d696e756d756d000000000000604482015260640161054e565b6105613382611fe8565b600d546001600160a01b03610100909104163314610ffa5760405162461bcd60e51b815260040161054e90612660565b600d5460ff166110435760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161054e565b610561816121bd565b600d546001600160a01b0361010090910416331461107c5760405162461bcd60e51b815260040161054e90612660565b600d5460ff166110c55760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161054e565b6105618161220f565b6060601480548060200260200160405190810160405280929190818152602001828054801561112657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611108575b5050505050905090565b600061113b600b5490565b611165907f0000000000000000000000000000000000000000000000000000000000000000612741565b905090565b600d546001600160a01b0361010090910416331461119a5760405162461bcd60e51b815260040161054e90612660565b6001600160a01b0381166111ff5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161054e565b61056181611add565b600d546001600160a01b036101009091041633146112385760405162461bcd60e51b815260040161054e90612660565b600d5460ff166112815760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161054e565b610561816122a7565b600d546001600160a01b036101009091041633146112ba5760405162461bcd60e51b815260040161054e90612660565b80518251146112c857600080fd5b60005b82518110156115855760006001600160a01b03168382815181106112ff57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316141561135e5760405162461bcd60e51b815260206004820152601b60248201527f5a65726f2041646472657373206973206e6f7420616c6c6f7765640000000000604482015260640161054e565b81818151811061137e57634e487b7160e01b600052603260045260246000fd5b6020026020010151600014156113d65760405162461bcd60e51b815260206004820152601b60248201527f5a65726f2041646472657373206973206e6f7420616c6c6f7765640000000000604482015260640161054e565b8181815181106113f657634e487b7160e01b600052603260045260246000fd5b60200260200101516015600085848151811061142257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555081818151811061146e57634e487b7160e01b600052603260045260246000fd5b60200260200101516011600085848151811061149a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008282546114d191906126ea565b925050819055507fb52bac850421b9939fa8ffee278ecba2501292f73b44bbd7bcf19e3e8f78ffa983828151811061151957634e487b7160e01b600052603260045260246000fd5b602002602001015183838151811061154157634e487b7160e01b600052603260045260246000fd5b602002602001015160405161156b9291906001600160a01b03929092168252602082015260400190565b60405180910390a18061157d81612758565b9150506112cb565b505050565b6002600e5414156115dd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161054e565b6002600e556001600160a01b03821660009081526011602052604090205481111561163b5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b604482015260640161054e565b6001600160a01b03821660009081526011602052604081208054839290611663908490612741565b909155506116739050828261232c565b50816001600160a01b03167f21901fa892c430ea8bd38b9390225ac8e67eac75ee10ffba16feefc539a288f9826040516116af91815260200190565b60405180910390a250506001600e55565b42811161170f5760405162461bcd60e51b815260206004820152601560248201527f43616e206e6f74207365742074696d65206261636b0000000000000000000000604482015260640161054e565b600c55565b6002600e5414156117675760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161054e565b6002600e556014546040516370a0823160e01b8152306004820152600091907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156117d257600080fd5b505afa1580156117e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180a91906125fb565b6118149190612702565b9050600081116118665760405162461bcd60e51b815260206004820152601760248201527f43616e27742073706c6974207a65726f20736861726573000000000000000000604482015260640161054e565b60005b601454811015611a1c577f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5601482815481106118b557634e487b7160e01b600052603260045260246000fd5b60009182526020918290200154604080516001600160a01b0390921682529181018590520160405180910390a17f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6014838154811061193257634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260248101859052604401602060405180830381600087803b15801561198657600080fd5b505af115801561199a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119be91906125c3565b611a0a5760405162461bcd60e51b815260206004820152601760248201527f436f756c646e2774207472616e7366657220746f6b656e000000000000000000604482015260640161054e565b80611a1481612758565b915050611869565b50506001600e55565b600d5460ff16611a6e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161054e565b600d805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b600d80546001600160a01b0383811661010081810274ffffffffffffffffffffffffffffffffffffffff001985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005b8151811015610aa45760006001600160a01b0316828281518110611b7b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415611bda5760405162461bcd60e51b815260206004820152601c60248201527f656d7074792061646472657373206973206e6f7420616c6c6f77656400000000604482015260640161054e565b611c15828281518110611bfd57634e487b7160e01b600052603260045260246000fd5b60200260200101516001611ab890919063ffffffff16565b15611c6c5760405162461bcd60e51b815260206004820152602160248201527f6475706c6963617465642061646472657373206973206e6f7420616c6c6f77656044820152601960fa1b606482015260840161054e565b611ca7828281518110611c8f57634e487b7160e01b600052603260045260246000fd5b602002602001015160016123b390919063ffffffff16565b611cb057600080fd5b7f37bdaf50464e57bc2ca69f36ace378196f59c54486a220a7051208cb4e249da0828281518110611cf157634e487b7160e01b600052603260045260246000fd5b6020026020010151604051611d1591906001600160a01b0391909116815260200190565b60405180910390a180611d2781612758565b915050611b47565b600d5460ff1615611d755760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161054e565b600d805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a9b3390565b604051636eb1769f60e11b81526001600160a01b0382811660048301523060248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063dd62ed3e9060440160206040518083038186803b158015611e1657600080fd5b505afa158015611e2a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087391906125fb565b60006002600e541415611ea35760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161054e565b6002600e556040516323b872dd60e01b81526001600160a01b038481166004830152306024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90606401602060405180830381600087803b158015611f1857600080fd5b505af1158015611f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5091906125c3565b6001600e559392505050565b60008180611f68611130565b1015611fc75760405162461bcd60e51b815260206004820152602860248201527f526571756573746564206e756d626572206f6620746f6b656e73206e6f7420616044820152677661696c61626c6560c01b606482015260840161054e565b82600b6000828254611fd991906126ea565b9091555050600b549392505050565b601054604051636eb1769f60e11b81526001600160a01b0384811660048301523060248301528392169063dd62ed3e9060440160206040518083038186803b15801561203357600080fd5b505afa158015612047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206b91906125fb565b10156120aa5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b604482015260640161054e565b6010546040516323b872dd60e01b81526001600160a01b03848116600483015230602483015260448201849052909116906323b872dd90606401602060405180830381600087803b1580156120fe57600080fd5b505af1158015612112573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213691906125c3565b506001600160a01b0382166000908152601160205260408120805483929061215f9084906126ea565b90915550506001600160a01b03821660008181526012602052604090819020429055517fd241e73300212f6df233a8e6d3146b88a9d4964e06621d54b5ff6afeba7b1b88906121b19084815260200190565b60405180910390a25050565b8061220a5760405162461bcd60e51b815260206004820152601a60248201527f5a65726f2076616c7565206973206e6f74206163636570746564000000000000604482015260640161054e565b600355565b6000811161226b5760405162461bcd60e51b8152602060048201526024808201527f4c6f636b2074696d65206d757374206e6f74206265206c657373207468616e206044820152637a65726f60e01b606482015260840161054e565b600f8190556040518181527f2416e279d018f03f6e6e190f55a4363348eca1c39db39c5e2019249d76142323906020015b60405180910390a150565b600081116122f75760405162461bcd60e51b815260206004820152601960248201527f5a65726f2076616c7565206973206e6f7420616c6c6f77656400000000000000604482015260640161054e565b60138190556040518181527f0f6e30cbea7cb67e47bd9d9c28efec570b560826aef4cf586a3b52a2e45396d19060200161229c565b60105460405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052600092169063a9059cbb90604401602060405180830381600087803b15801561237b57600080fd5b505af115801561238f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad691906125c3565b6000611ad6836001600160a01b03841660006123e2838360009081526001919091016020526040902054151590565b61241857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610873565b506000610873565b80356001600160a01b038116811461243757600080fd5b919050565b600082601f83011261244c578081fd5b8135602061246161245c836126c6565b612695565b80838252828201915082860187848660051b8901011115612480578586fd5b855b858110156124a55761249382612420565b84529284019290840190600101612482565b5090979650505050505050565b6000602082840312156124c3578081fd5b611ad682612420565b6000602082840312156124dd578081fd5b813567ffffffffffffffff8111156124f3578182fd5b6124ff8482850161243c565b949350505050565b60008060408385031215612519578081fd5b823567ffffffffffffffff80821115612530578283fd5b61253c8683870161243c565b9350602091508185013581811115612552578384fd5b85019050601f81018613612564578283fd5b803561257261245c826126c6565b80828252848201915084840189868560051b8701011115612591578687fd5b8694505b838510156125b3578035835260019490940193918501918501612595565b5080955050505050509250929050565b6000602082840312156125d4578081fd5b81518015158114611ad6578182fd5b6000602082840312156125f4578081fd5b5035919050565b60006020828403121561260c578081fd5b5051919050565b6020808252825182820181905260009190848201906040850190845b818110156126545783516001600160a01b03168352928401929184019160010161262f565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156126be576126be612789565b604052919050565b600067ffffffffffffffff8211156126e0576126e0612789565b5060051b60200190565b600082198211156126fd576126fd612773565b500190565b60008261271d57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561273c5761273c612773565b500290565b60008282101561275357612753612773565b500390565b600060001982141561276c5761276c612773565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122096ef81f11e64051860fb02b256ed56d0853b9803b721a3e33b5098d53399fb2e64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c80638da7878c11610130578063c4bfce18116100b8578063ee19f29a1161007c578063ee19f29a146104a2578063f2fde38b146104c5578063f4a0a528146104d8578063fa4d2c67146104eb578063fe7dbca6146104f657600080fd5b8063c4bfce1814610444578063d477edf41461044c578063d5abeb011461045f578063db7a460514610485578063e14ca3531461049a57600080fd5b8063a0712d68116100ff578063a0712d68146103f5578063b6b55f2514610408578063bc3377d91461041b578063beafca6514610426578063c380d9801461043957600080fd5b80638da7878c146103bf5780639d1c0e4a146103c75780639f181b5e146103da578063a0378aec146103e257600080fd5b80635c975abb116101be578063715018a611610182578063715018a61461036157806372f702f314610369578063775b9c131461038e5780638456cb59146103a15780638da5cb5b146103a957600080fd5b80635c975abb1461030757806360f609e41461031e57806364954df81461033e5780636817c76c146103465780636f9170f61461034e57600080fd5b80632e17de78116102055780632e17de781461029f5780633ccfd60b146102b25780633e99c1e4146102ba5780633f4ba83a146102e357806349bb330f146102eb57600080fd5b8063012ce50114610237578063045544431461024c5780631a0cb3a714610263578063295e4edf1461028c575b600080fd5b61024a6102453660046125e3565b610509565b005b600f545b6040519081526020015b60405180910390f35b6102506102713660046124b2565b6001600160a01b03166000908152600a602052604090205490565b61024a61029a3660046125e3565b610564565b61024a6102ad3660046125e3565b6105ec565b61024a6107ad565b6102506102c83660046124b2565b6001600160a01b031660009081526011602052604090205490565b61024a6107e7565b6004546007545b6040805192835260208301919091520161025a565b600d5460ff165b604051901515815260200161025a565b61025061032c3660046124b2565b60156020526000908152604090205481565b61024a61081f565b601354610250565b61030e61035c3660046124b2565b610866565b61024a610879565b6010546001600160a01b03165b6040516001600160a01b03909116815260200161025a565b61024a61039c3660046124cc565b6108b3565b61024a6108ec565b600d5461010090046001600160a01b0316610376565b600c54610250565b61030e6103d53660046124b2565b610924565b600b54610250565b61024a6103f03660046124cc565b610956565b61024a6104033660046125e3565b610aa8565b61024a6104163660046125e3565b610f28565b6005546008546102f2565b61024a6104343660046125e3565b610fca565b6006546009546102f2565b600354610250565b61024a61045a3660046125e3565b61104c565b7f0000000000000000000000000000000000000000000000000000000000000000610250565b61048d6110ce565b60405161025a9190612613565b610250611130565b61030e6104b03660046124b2565b60166020526000908152604090205460ff1681565b61024a6104d33660046124b2565b61116a565b61024a6104e63660046125e3565b611208565b60005460ff1661030e565b61024a610504366004612507565b61128a565b600d5460ff166105575760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064015b60405180910390fd5b610561338261158a565b50565b600d546001600160a01b036101009091041633146105945760405162461bcd60e51b815260040161054e90612660565b42600c5411806105a45750600c54155b6105e35760405162461bcd60e51b815260206004820152601060248201526f14d85b19481a185cc81cdd185c9d195960821b604482015260640161054e565b610561816116c0565b600d5460ff16156106325760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161054e565b336000908152601560205260409020541580159061066057503360009081526016602052604090205460ff16155b15610763576040805160018082528183019092526000916020808301908036833701905050905033816000815181106106a957634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015260405163280de2bb60e21b81527365280fcb62f1b2bee93b08ce7f66ae899b2e48959063a0378aec906106f8908490600401612613565b600060405180830381600087803b15801561071257600080fd5b505af1158015610726573d6000803e3d6000fd5b505050506001601660006107373390565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790555050565b61076c33610924565b6105575760405162461bcd60e51b815260206004820152601260248201527146756e64206973206c6f636b6564206e6f7760701b604482015260640161054e565b600d546001600160a01b036101009091041633146107dd5760405162461bcd60e51b815260040161054e90612660565b6107e5611714565b565b600d546001600160a01b036101009091041633146108175760405162461bcd60e51b815260040161054e90612660565b6107e5611a25565b600d546001600160a01b0361010090910416331461084f5760405162461bcd60e51b815260040161054e90612660565b6107e56000805460ff19811660ff90911615179055565b6000610873600183611ab8565b92915050565b600d546001600160a01b036101009091041633146108a95760405162461bcd60e51b815260040161054e90612660565b6107e56000611add565b600d546001600160a01b036101009091041633146108e35760405162461bcd60e51b815260040161054e90612660565b61056181611b44565b600d546001600160a01b0361010090910416331461091c5760405162461bcd60e51b815260040161054e90612660565b6107e5611d2f565b600f546001600160a01b0382166000908152601260205260408120549091429161094e91906126ea565b111592915050565b600d546001600160a01b036101009091041633146109865760405162461bcd60e51b815260040161054e90612660565b60005b8151811015610aa45760006001600160a01b03168282815181106109bd57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415610a1c5760405162461bcd60e51b815260206004820152601b60248201527f5a65726f2041646472657373206973206e6f7420616c6c6f7765640000000000604482015260640161054e565b610a92828281518110610a3f57634e487b7160e01b600052603260045260246000fd5b6020026020010151610a8d848481518110610a6a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031660009081526011602052604090205490565b61158a565b80610a9c81612758565b915050610989565b5050565b600d5460ff1615610aee5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161054e565b42600c5411158015610b015750600c5415155b610b4d5760405162461bcd60e51b815260206004820152601660248201527f53616c6520646964206e6f742073746172742079657400000000000000000000604482015260640161054e565b807f000000000000000000000000000000000000000000000000000000000000000081600b54610b7d91906126ea565b1115610bcb5760405162461bcd60e51b815260206004820152601b60248201527f50757263686173652065786365656473206d617820737570706c790000000000604482015260640161054e565b60005460ff1615610c2b57610bdf33610866565b610c2b5760405162461bcd60e51b815260206004820152601460248201527f4d757374206265207768697465206c6973746564000000000000000000000000604482015260640161054e565b60008211610c6c5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5917d85b5bdd5b9d60921b604482015260640161054e565b336000908152600a60205260408120548190610c899085906126ea565b90506000610c96336102c8565b905060008111610cf25760405162461bcd60e51b815260206004820152602160248201527f4e6f2050617274696369706174696f6e2077697468207a65726f207374616b656044820152607360f81b606482015260840161054e565b6004548111610d2e576007548211610d0a5784610d27565b336000908152600a6020526040902054600754610d279190612741565b9250610d92565b6005548111610d63576008548211610d465784610d27565b336000908152600a6020526040902054600854610d279190612741565b6009548211610d725784610d8f565b336000908152600a6020526040902054600954610d8f9190612741565b92505b6000670de0b6b3a7640000610da660135490565b610db09086612722565b610dba9190612702565b9050610dc4611130565b841115610e135760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e6365000000604482015260640161054e565b610e1c33611daa565b811115610e6b5760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e742070726963652076616c75650000000000000000604482015260640161054e565b610e753382611e4e565b610eb25760405162461bcd60e51b815260206004820152600e60248201526d14185e5b595b9d0819985a5b195960921b604482015260640161054e565b610ebb84611f5c565b50336000908152600a602052604081208054869290610edb9084906126ea565b9091555050604080513381526020810186905280820183905290517f430da7b4ea1a68abe9b6f9b621aa90a53090bb079c516d1bf6402c51a48b800b9181900360600190a1505050505050565b600d5460ff1615610f6e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161054e565b600454811015610fc05760405162461bcd60e51b815260206004820152601a60248201527f416d6f756e74206973206c65737320746865206d696e756d756d000000000000604482015260640161054e565b6105613382611fe8565b600d546001600160a01b03610100909104163314610ffa5760405162461bcd60e51b815260040161054e90612660565b600d5460ff166110435760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161054e565b610561816121bd565b600d546001600160a01b0361010090910416331461107c5760405162461bcd60e51b815260040161054e90612660565b600d5460ff166110c55760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161054e565b6105618161220f565b6060601480548060200260200160405190810160405280929190818152602001828054801561112657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611108575b5050505050905090565b600061113b600b5490565b611165907f0000000000000000000000000000000000000000000000000000000000000000612741565b905090565b600d546001600160a01b0361010090910416331461119a5760405162461bcd60e51b815260040161054e90612660565b6001600160a01b0381166111ff5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161054e565b61056181611add565b600d546001600160a01b036101009091041633146112385760405162461bcd60e51b815260040161054e90612660565b600d5460ff166112815760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161054e565b610561816122a7565b600d546001600160a01b036101009091041633146112ba5760405162461bcd60e51b815260040161054e90612660565b80518251146112c857600080fd5b60005b82518110156115855760006001600160a01b03168382815181106112ff57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316141561135e5760405162461bcd60e51b815260206004820152601b60248201527f5a65726f2041646472657373206973206e6f7420616c6c6f7765640000000000604482015260640161054e565b81818151811061137e57634e487b7160e01b600052603260045260246000fd5b6020026020010151600014156113d65760405162461bcd60e51b815260206004820152601b60248201527f5a65726f2041646472657373206973206e6f7420616c6c6f7765640000000000604482015260640161054e565b8181815181106113f657634e487b7160e01b600052603260045260246000fd5b60200260200101516015600085848151811061142257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555081818151811061146e57634e487b7160e01b600052603260045260246000fd5b60200260200101516011600085848151811061149a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008282546114d191906126ea565b925050819055507fb52bac850421b9939fa8ffee278ecba2501292f73b44bbd7bcf19e3e8f78ffa983828151811061151957634e487b7160e01b600052603260045260246000fd5b602002602001015183838151811061154157634e487b7160e01b600052603260045260246000fd5b602002602001015160405161156b9291906001600160a01b03929092168252602082015260400190565b60405180910390a18061157d81612758565b9150506112cb565b505050565b6002600e5414156115dd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161054e565b6002600e556001600160a01b03821660009081526011602052604090205481111561163b5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b604482015260640161054e565b6001600160a01b03821660009081526011602052604081208054839290611663908490612741565b909155506116739050828261232c565b50816001600160a01b03167f21901fa892c430ea8bd38b9390225ac8e67eac75ee10ffba16feefc539a288f9826040516116af91815260200190565b60405180910390a250506001600e55565b42811161170f5760405162461bcd60e51b815260206004820152601560248201527f43616e206e6f74207365742074696d65206261636b0000000000000000000000604482015260640161054e565b600c55565b6002600e5414156117675760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161054e565b6002600e556014546040516370a0823160e01b8152306004820152600091907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156117d257600080fd5b505afa1580156117e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180a91906125fb565b6118149190612702565b9050600081116118665760405162461bcd60e51b815260206004820152601760248201527f43616e27742073706c6974207a65726f20736861726573000000000000000000604482015260640161054e565b60005b601454811015611a1c577f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5601482815481106118b557634e487b7160e01b600052603260045260246000fd5b60009182526020918290200154604080516001600160a01b0390921682529181018590520160405180910390a17f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6014838154811061193257634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260248101859052604401602060405180830381600087803b15801561198657600080fd5b505af115801561199a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119be91906125c3565b611a0a5760405162461bcd60e51b815260206004820152601760248201527f436f756c646e2774207472616e7366657220746f6b656e000000000000000000604482015260640161054e565b80611a1481612758565b915050611869565b50506001600e55565b600d5460ff16611a6e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161054e565b600d805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b600d80546001600160a01b0383811661010081810274ffffffffffffffffffffffffffffffffffffffff001985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005b8151811015610aa45760006001600160a01b0316828281518110611b7b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415611bda5760405162461bcd60e51b815260206004820152601c60248201527f656d7074792061646472657373206973206e6f7420616c6c6f77656400000000604482015260640161054e565b611c15828281518110611bfd57634e487b7160e01b600052603260045260246000fd5b60200260200101516001611ab890919063ffffffff16565b15611c6c5760405162461bcd60e51b815260206004820152602160248201527f6475706c6963617465642061646472657373206973206e6f7420616c6c6f77656044820152601960fa1b606482015260840161054e565b611ca7828281518110611c8f57634e487b7160e01b600052603260045260246000fd5b602002602001015160016123b390919063ffffffff16565b611cb057600080fd5b7f37bdaf50464e57bc2ca69f36ace378196f59c54486a220a7051208cb4e249da0828281518110611cf157634e487b7160e01b600052603260045260246000fd5b6020026020010151604051611d1591906001600160a01b0391909116815260200190565b60405180910390a180611d2781612758565b915050611b47565b600d5460ff1615611d755760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161054e565b600d805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a9b3390565b604051636eb1769f60e11b81526001600160a01b0382811660048301523060248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063dd62ed3e9060440160206040518083038186803b158015611e1657600080fd5b505afa158015611e2a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087391906125fb565b60006002600e541415611ea35760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161054e565b6002600e556040516323b872dd60e01b81526001600160a01b038481166004830152306024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90606401602060405180830381600087803b158015611f1857600080fd5b505af1158015611f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5091906125c3565b6001600e559392505050565b60008180611f68611130565b1015611fc75760405162461bcd60e51b815260206004820152602860248201527f526571756573746564206e756d626572206f6620746f6b656e73206e6f7420616044820152677661696c61626c6560c01b606482015260840161054e565b82600b6000828254611fd991906126ea565b9091555050600b549392505050565b601054604051636eb1769f60e11b81526001600160a01b0384811660048301523060248301528392169063dd62ed3e9060440160206040518083038186803b15801561203357600080fd5b505afa158015612047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206b91906125fb565b10156120aa5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b604482015260640161054e565b6010546040516323b872dd60e01b81526001600160a01b03848116600483015230602483015260448201849052909116906323b872dd90606401602060405180830381600087803b1580156120fe57600080fd5b505af1158015612112573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213691906125c3565b506001600160a01b0382166000908152601160205260408120805483929061215f9084906126ea565b90915550506001600160a01b03821660008181526012602052604090819020429055517fd241e73300212f6df233a8e6d3146b88a9d4964e06621d54b5ff6afeba7b1b88906121b19084815260200190565b60405180910390a25050565b8061220a5760405162461bcd60e51b815260206004820152601a60248201527f5a65726f2076616c7565206973206e6f74206163636570746564000000000000604482015260640161054e565b600355565b6000811161226b5760405162461bcd60e51b8152602060048201526024808201527f4c6f636b2074696d65206d757374206e6f74206265206c657373207468616e206044820152637a65726f60e01b606482015260840161054e565b600f8190556040518181527f2416e279d018f03f6e6e190f55a4363348eca1c39db39c5e2019249d76142323906020015b60405180910390a150565b600081116122f75760405162461bcd60e51b815260206004820152601960248201527f5a65726f2076616c7565206973206e6f7420616c6c6f77656400000000000000604482015260640161054e565b60138190556040518181527f0f6e30cbea7cb67e47bd9d9c28efec570b560826aef4cf586a3b52a2e45396d19060200161229c565b60105460405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052600092169063a9059cbb90604401602060405180830381600087803b15801561237b57600080fd5b505af115801561238f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad691906125c3565b6000611ad6836001600160a01b03841660006123e2838360009081526001919091016020526040902054151590565b61241857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610873565b506000610873565b80356001600160a01b038116811461243757600080fd5b919050565b600082601f83011261244c578081fd5b8135602061246161245c836126c6565b612695565b80838252828201915082860187848660051b8901011115612480578586fd5b855b858110156124a55761249382612420565b84529284019290840190600101612482565b5090979650505050505050565b6000602082840312156124c3578081fd5b611ad682612420565b6000602082840312156124dd578081fd5b813567ffffffffffffffff8111156124f3578182fd5b6124ff8482850161243c565b949350505050565b60008060408385031215612519578081fd5b823567ffffffffffffffff80821115612530578283fd5b61253c8683870161243c565b9350602091508185013581811115612552578384fd5b85019050601f81018613612564578283fd5b803561257261245c826126c6565b80828252848201915084840189868560051b8701011115612591578687fd5b8694505b838510156125b3578035835260019490940193918501918501612595565b5080955050505050509250929050565b6000602082840312156125d4578081fd5b81518015158114611ad6578182fd5b6000602082840312156125f4578081fd5b5035919050565b60006020828403121561260c578081fd5b5051919050565b6020808252825182820181905260009190848201906040850190845b818110156126545783516001600160a01b03168352928401929184019160010161262f565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156126be576126be612789565b604052919050565b600067ffffffffffffffff8211156126e0576126e0612789565b5060051b60200190565b600082198211156126fd576126fd612773565b500190565b60008261271d57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561273c5761273c612773565b500290565b60008282101561275357612753612773565b500390565b600060001982141561276c5761276c612773565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122096ef81f11e64051860fb02b256ed56d0853b9803b721a3e33b5098d53399fb2e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "availableTokenCount()": {
        "details": "Check whether tokens are still available",
        "returns": {
          "_0": "the available token count"
        }
      },
      "maxSupply()": {
        "details": "Get the max Supply",
        "returns": {
          "_0": "the maximum token count"
        }
      },
      "mint(uint256)": {
        "details": "called only when sale is startedcalled only when not paused`_amount` can't zeromust not xceed the cap",
        "params": {
          "_amount": "number of token to be minted emit Transfer"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pauses all token transfers. See {ERC721Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "tokenCount()": {
        "details": "Get the current token count",
        "returns": {
          "_0": "the created token count"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpauses all token transfers. See {ERC721Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      },
      "updateSaleStartTime(uint256)": {
        "details": "`__startTimeURI` must be more than the current time",
        "params": {
          "_startTime": "new _startTime"
        }
      },
      "withdraw()": {
        "details": "Withdraw accumulated balance for `wallets`"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mint(uint256)": {
        "notice": "caller should pay the required price"
      },
      "updateSaleStartTime(uint256)": {
        "notice": "Only owner can call it"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6267,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "_whiteListEnabled",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6270,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "_whiteList",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)2986_storage"
      },
      {
        "astId": 5327,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "_baseAllocation",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5332,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "_level1",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5337,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "_level2",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5342,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "_level3",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5345,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "_level1Max",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5350,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "_level2Max",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5355,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "_level3Max",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5359,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "_userAllocation",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5579,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "_tokenCount",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5988,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "_startTimeSale",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 708,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "_paused",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 591,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "_owner",
        "offset": 1,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 793,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "_status",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5753,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "_lockDuration",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 5755,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "_stakingToken",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 5759,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "stakerTotalStakes",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5763,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "stakerTimestamp",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6067,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "_mintPrice",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 6073,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "_wallets",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3679,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "migrateStaker",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3683,
        "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
        "label": "isMigratedStaker",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2986_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2985,
            "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2685_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2685_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2680,
            "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2684,
            "contract": "contracts/AirdropedStartfiIDOWithStaking.sol:AirdropedStartfiIDOWithStaking",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}